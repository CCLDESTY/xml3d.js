
/*************************************************************************/
/*                                                                       */
/*  xml3d_classes.js                                                     */
/*  Configures generic elements to provide XML3D IDLs					 */
/*                                                                       */
/*  Copyright (C) 2010                                                   */
/*  DFKI - German Research Center for Artificial Intelligence            */
/*                                                                       */
/*  This file is part of xml3d.js                                        */
/*                                                                       */
/*  xml3d.js is free software; you can redistribute it and/or modify     */
/*  under the terms of the GNU General Public License as                 */
/*  published by the Free Software Foundation; either version 2 of       */
/*  the License, or (at your option) any later version.                  */
/*                                                                       */
/*  xml3d.js is distributed in the hope that it will be useful, but      */
/*  WITHOUT ANY WARRANTY; without even the implied warranty of           */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                 */
/*  See the GNU General Public License                                   */
/*  (http://www.fsf.org/licensing/licenses/gpl.html) for more details.   */
/*                                                                       */
/*************************************************************************/

 // ===> THIS CODE IS GENERATED. DO NOT EDIT THIS FILE DIRECTLY <===

//Check, if basics have already been defined
var org;
if (!org || !org.xml3d)
  throw new Error("xml3d.js has to be included first");

//Create global symbol org.xml3d.webgl
if (!org.xml3d.event)
	org.xml3d.event = {};
else if (typeof org.xml3d.event != "object")
	throw new Error("org.xml3d.event already exists and is not an object");

//Create global symbol org.xml3d.data
if (!org.xml3d.data)
	org.xml3d.data = {};
else if (typeof org.xml3d.data != "object")
	throw new Error("org.xml3d.data already exists and is not an object");


/*
 * Workaround for DOMAttrModified issues in WebKit based browsers:
 * https://bugs.webkit.org/show_bug.cgi?id=8191
 */
if(navigator.userAgent.indexOf("WebKit") != -1)
{
	var attrModifiedWorks = false;
	var listener = function(){ attrModifiedWorks = true; };
	document.documentElement.addEventListener("DOMAttrModified", listener, false);
	document.documentElement.setAttribute("___TEST___", true);
	document.documentElement.removeAttribute("___TEST___", true);
	document.documentElement.removeEventListener("DOMAttrModified", listener, false);

	if (!attrModifiedWorks)
	{
		Element.prototype.__setAttribute = HTMLElement.prototype.setAttribute;

		Element.prototype.setAttribute = function(attrName, newVal)
		{
			var prevVal = this.getAttribute(attrName);
			this.__setAttribute(attrName, newVal);
			newVal = this.getAttribute(attrName);
			if (newVal != prevVal)
			{
				var evt = document.createEvent("MutationEvent");
				evt.initMutationEvent(
						"DOMAttrModified",
						true,
						false,
						this,
						prevVal || "",
						newVal || "",
						attrName,
						(prevVal == null) ? evt.ADDITION : evt.MODIFICATION
				);
				this.dispatchEvent(evt);
			}
		};

		Element.prototype.__removeAttribute = HTMLElement.prototype.removeAttribute;
		Element.prototype.removeAttribute = function(attrName)
		{
			var prevVal = this.getAttribute(attrName);
			this.__removeAttribute(attrName);
			var evt = document.createEvent("MutationEvent");
			evt.initMutationEvent(
					"DOMAttrModified",
					true,
					false,
					this,
					prevVal,
					"",
					attrName,
					evt.REMOVAL
			);
			this.dispatchEvent(evt);
		};
	}
}


org.xml3d.classInfo = {};
org.xml3d.methods = {};
org.xml3d.document = null;

org.xml3d.data.configure = function(xml3ds) {
 	if (!org.xml3d.document)
 		org.xml3d.document = new org.xml3d.XML3DDocument();

 	for(var x in xml3ds) {
 		org.xml3d.document.initXml3d(xml3ds[x]);
 	}
};

org.xml3d.defineClass = function(ctor, parent, methods) {
	if (parent) {
		function inheritance() {
		}
		inheritance.prototype = parent.prototype;
		ctor.prototype = new inheritance();
		ctor.prototype.constructor = ctor;
		ctor.superClass = parent;
	}
	if (methods) {
		for ( var m in methods) {
			ctor.prototype[m] = methods[m];
		}
	}
	return ctor;
};

org.xml3d.isa = function(object, classInfo) {
	var oClass = object._classInfo;
	while (oClass !== undefined)  {
		if (oClass == classInfo)
			return true;
		oClass = oClass.constructor.superClass;
	}
	return false;
};

// -----------------------------------------------------------------------------
// Class URI
// -----------------------------------------------------------------------------
org.xml3d.URI = function(str) {
	if (!str)
		str = "";
	// Based on the regex in RFC2396 Appendix B.
	var parser = /^(?:([^:\/?\#]+):)?(?:\/\/([^\/?\#]*))?([^?\#]*)(?:\?([^\#]*))?(?:\#(.*))?/;
	var result = str.match(parser);
	this.scheme = result[1] || null;
	this.authority = result[2] || null;
	this.path = result[3] || null;
	this.query = result[4] || null;
	this.fragment = result[5] || null;
};

// Restore the URI to it's stringy glory.
org.xml3d.URI.prototype.toString = function() {
	var str = "";
	if (this.scheme) {
		str += this.scheme + ":";
	}
	if (this.authority) {
		str += "//" + this.authority;
	}
	if (this.path) {
		str += this.path;
	}
	if (this.query) {
		str += "?" + this.query;
	}
	if (this.fragment) {
		str += "#" + this.fragment;
	}
	return str;
};

// -----------------------------------------------------------------------------
// Class URIResolver
// -----------------------------------------------------------------------------
org.xml3d.URIResolver = function() {
};

org.xml3d.URIResolver.resolve = function(document, uriStr) {
	if (!document || !uriStr)
		return null;
	var uri = new org.xml3d.URI(uriStr);

	if (uri.scheme == 'urn')
	{
		org.xml3d.debug.logInfo("++ Found URN." + uriStr);
		return null;
	}

	if (!uri.path)
		return org.xml3d.URIResolver.resolveLocal(document, uri.fragment);


	org.xml3d.debug.logWarning("++ Can't resolve global hrefs yet: " + uriStr);
	// TODO Resolve intra-document references
	return null;
};

org.xml3d.URIResolver.resolveLocal = function(document, id) {
	if (document !== undefined && document) {
		var elem = document.getElementById(id);
		//org.xml3d.debug.logInfo("++ Found: " + elem);
		if (elem)
		{
			var node = document.getNode(elem);
			//org.xml3d.debug.logInfo("++ Found: " + node);
			return node;
		}
	}
	return null;
};

var getElementByIdWrapper = function(xmldoc, myID, namespace) {

};

// -----------------------------------------------------------------------------
// Class XML3DNodeFactory
// -----------------------------------------------------------------------------
org.xml3d.XML3DNodeFactory = function() {
};

org.xml3d.XML3DNodeFactory.isXML3DNode = function(node) {
	return (node.nodeType === Node.ELEMENT_NODE && (node.namespaceURI == org.xml3d.xml3dNS));
};

org.xml3d.XML3DNodeFactory.prototype.create = function(node, context) {
	var n, t;
	if (org.xml3d.XML3DNodeFactory.isXML3DNode(node)) {
		var classInfo = org.xml3d.classInfo[node.localName];
		if (classInfo === undefined) {
			org.xml3d.debug.logInfo("Unrecognised element " + node.localName);
		} else {
			//classInfo.configure(node, context);
			classInfo(node, context);
			node._configured = true;
			node._classInfo = classInfo;
			//n = new elementType(ctx);
			//node._xml3dNode = n;
			Array.forEach(Array.map(node.childNodes, function(n) {
				return this.create(n, context);
			}, this), function(c) {

			});
			return n;
		}
	}
};

org.xml3d.XML3DNodeFactory.createXML3DVec3FromString = function(value) {
	var result = new XML3DVec3();
	result.setVec3Value(value);
	return result;
};

org.xml3d.XML3DNodeFactory.createXML3DRotationFromString = function(value) {
	var result = new XML3DRotation();
	result.setAxisAngleValue(value);
	return result;
};

org.xml3d.XML3DNodeFactory.createBooleanFromString = function(value)
{
	return new Boolean(value);
};

org.xml3d.XML3DNodeFactory.createStringFromString = function(value)
{
	return new String(value);
};

org.xml3d.XML3DNodeFactory.createIntFromString = function(value)
{
	return parseInt(value);
};

org.xml3d.XML3DNodeFactory.createFloatFromString = function(value)
{
	return parseFloat(value);
};

org.xml3d.XML3DNodeFactory.createAnyURIFromString = function(value)
{
	//TODO: not implemented
	return value;
};

org.xml3d.XML3DNodeFactory.createEnumFromString = function(value)
{
	//TODO: not implemented
	return value;
};
// -----------------------------------------------------------------------------
// Class XML3Document
// -----------------------------------------------------------------------------
org.xml3d.XML3DDocument = function(parentDocument) {
	this.parentDocument = parentDocument;
	this.factory = new org.xml3d.XML3DNodeFactory();
	this.onload = function() {
		alert("on load");
	};
	this.onerror = function() {
		alert("on error");
	};
};

org.xml3d.XML3DDocument.prototype.initXml3d = function(xml3dElement) {

	if (xml3dElement._xml3dNode !== undefined)
		return;

	xml3dNode = this.getNode(xml3dElement);
	xml3dElement.addEventListener('DOMNodeRemoved', this.onRemove, true);
	xml3dElement.addEventListener('DOMNodeInserted', this.onAdd, true);
	xml3dElement.addEventListener('DOMAttrModified', this.onSet, true);
	xml3dElement.addEventListener('DOMCharacterDataModified', this.onTextSet, true);

};


function isEqual(val1, val2)
{
	if(val1 === val2)
	{
		return true;
	}

	if(! (val1 && val2))
	{
		return false;
	}

	if(org.xml3d.isUInt16Array(val1)   ||
	   org.xml3d.isFloatArray(val1)    ||
	   org.xml3d.isFloat2Array(val1)   ||
	   org.xml3d.isFloat3Array(val1)   ||
	   org.xml3d.isFloat4Array(val1)   ||
	   org.xml3d.isFloat4x4Array(val1) ||
	   org.xml3d.isBoolArray(val1))
	{

		if(val1.length != val2.length)
		{
			return false;
		}

		if(val1.toString() != val2.toString())
		{
			return false;
		}

		for(var i=0; i < val1.length; i++)
		{
			if(val1[i] != val2[i])
			{
				return false;
			}
		}
	}
	else if(org.xml3d.isXML3DVec3(val1))
	{
		return val1.x == val2.x &&
			   val1.y == val2.y &&
			   val1.z == val2.z;
	}
	else if(org.xml3d.isXML3DRotation(val1))
	{
		return val1.x == val2.x &&
			   val1.y == val2.y &&
			   val1.z == val2.z &&
			   val1.w == val2.w;
	}
	else
	{
		for(var i in val1)
		{
			if(val1[i] != val2[i])
			{
				return false;
			}
		}
	}

	return true;
};


org.xml3d.XML3DDocument.prototype.onTextSet = function(e){
	if (e.target === undefined)
	{
		org.xml3d.debug.logInfo("Unhandled event on: " + e.target.localName);
		return;
	}
	try
    {
        var bindNode = e.target.parentNode;
        var oldValue = e.target.parentNode.value;

        e.target.parentNode.setValue(e);

        if (bindNode.notificationRequired() && ! isEqual(oldValue, e.target.parentNode.value))
        {
            bindNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "text", oldValue, e.target.parentNode.value));
        }
    }
    catch (e)
    {
        org.xml3d.debug.logError("Exception in textSet:");
        org.xml3d.debug.logException(e);
    }
};

/*
org.xml3d.XML3DDocument.prototype.onTextSet = function(e){
	if (e.target === undefined)
	{
		org.xml3d.debug.logInfo("Unhandled event on: " + e.target.localName);
		return;
	}
	try
    {
        var bindNode = e.target.parentNode;
        var oldValue = e.target.parentNode.value;

        e.target.parentNode.setValue(e);

        if (bindNode.notificationRequired() && ! isEqual(oldValue, e.target.parentNode.value))
        {
            bindNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "text", oldValue, e.target.parentNode.value));
        }
    }
    catch (e)
    {
        org.xml3d.debug.logError("Exception in textSet:");
        org.xml3d.debug.logException(e);
    }
};
*/




org.xml3d.XML3DDocument.prototype.onAdd = function(e) {
	try {
		org.xml3d.document.getNode(e.target);

		var parent = e.target.parentNode;
		if (parent && parent.notify) {
			parent.notify(new org.xml3d.Notification(this, MutationEvent.ADDITION, null, null, e.target));
		}
	} catch (e) {
		org.xml3d.debug.logError("Exception in configuring node:");
		org.xml3d.debug.logException(e);
	}
};

org.xml3d.XML3DDocument.prototype.onSet = function(e) {
	if (e.target === undefined)
	{
		org.xml3d.debug.logInfo("Unhandled event on: " + e.target.localName);
		return;
	}

	try
	{
		var result;

		if(e.attrChange == MutationEvent.REMOVAL)
		{
			result = e.target.resetAttribute(e.attrName);
		}
		else if(e.attrChange == MutationEvent.MODIFICATION ||
				e.attrChange == MutationEvent.ADDITION)
		{
			result = e.target.setField(e);
		}
		else
		{
			org.xml3d.debug.logError("An unknown event for attribue " + e.attrName +
					                 " of node " + e.target.localName + " has occured");
			return;
		}


		if (result == org.xml3d.event.HANDLED &&
			e.target.notificationRequired()   &&
			! isEqual(e.prevValue, e.newValue))
		{
			// The removal of an attribute is also handled as MutationEvent.MODIFICATION since
			// this event is handled by resetting the internal attribute value.
			e.target.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, e.attrName, e.prevValue, e.newValue));
		}
	 }
	 catch (e)
	 {
		org.xml3d.debug.logError("Exception in setField:");
		org.xml3d.debug.logException(e);
	}
};

org.xml3d.XML3DDocument.prototype.onRemove = function(e)
{
	org.xml3d.debug.logInfo("Remove: "+e);

	if (e.target === undefined)
	{
		org.xml3d.debug.logInfo("Unhandled event on: " + e.target.localName);
		return;
	}
	try
    {
    	//var parent = e.target.parentNode;
		//if (parent && parent.notify) {
		//	parent.notify(new org.xml3d.Notification(this, MutationEvent.REMOVAL, null, null, e.target));

        var bindNode = e.target;

        if (bindNode.notificationRequired())
        {
            bindNode.notify(new org.xml3d.Notification(this, MutationEvent.REMOVAL, "node", e.prevValue, e.newValue));
        }

        for(var i = 0; i < bindNode.adapters.length; i++)
        {
        	var adapter = bindNode.adapters[i];
        	if(adapter.dispose)
        	{
        		adapter.dispose();
        	}
        }
    }
    catch (e)
    {
        org.xml3d.debug.logError("Exception in onRemove:");
        org.xml3d.debug.logException(e);
    }
};

org.xml3d.XML3DDocument.prototype.onunload = function(xml3dElement) {
};

org.xml3d.XML3DDocument.prototype.getNode = function(element) {
	if (element._configured !== undefined)
		return element;

	var ctx = {
			assert : org.xml3d.debug.assert,
			log : org.xml3d.debug.logInfo,
			factory : this.factory,
			doc : this
		};
	return this.factory.create(element, ctx);
};

org.xml3d.XML3DDocument.prototype.resolve = function(uriStr) {
		return org.xml3d.URIResolver.resolve(this, uriStr);
};

org.xml3d.XML3DDocument.prototype.nativeGetElementById = document.getElementById;

org.xml3d.XML3DDocument.prototype.getElementById = function(id) {
	return document.getElementById(id);
};

//-----------------------------------------------------------------------------
//Class Notification
//-----------------------------------------------------------------------------
org.xml3d.Notification = function(notifier, eventType, attribute, oldValue, newValue) {
	this.notifier = notifier;
	this.eventType = eventType;
	this.attribute = attribute;
	this.oldValue = oldValue;
	this.newValue = newValue;
};

//-----------------------------------------------------------------------------
// Adapter and Adapter factory
//-----------------------------------------------------------------------------

org.xml3d.data.Adapter = function(factory, node) {
	this.factory = factory; // optional
	this.node = node; // optional
	this.init = function() {
	  // Init is called by the factory after adding the adapter to the node
	};

};
org.xml3d.data.Adapter.prototype.notifyChanged = function(e) {
	 // Notification from the data structure. e is of type org.xml3d.Notification.
};
org.xml3d.data.Adapter.prototype.isAdapterFor = function(aType) {
	 return false; // Needs to be overwritten
};


org.xml3d.data.AdapterFactory = function() {
	this.getAdapter = function(node, atype) {
		if (!node || node._configured === undefined)
			return null;
		for (i = 0; i < node.adapters.length; i++) {
			if (node.adapters[i].isAdapterFor(atype)) {
				return node.adapters[i];
			}
		}
		// No adapter found, try to create one
		var adapter = this.createAdapter(node);
		if (adapter) {
			node.addAdapter(adapter);
			adapter.init();
		}
		return adapter;
	};
};
org.xml3d.data.AdapterFactory.prototype.createAdapter = function(node) {
		return null;
};

//-----------------------------------------------------------------------------
// Init helper
//-----------------------------------------------------------------------------
org.xml3d.initFloat = function(value, defaultValue) {
	return value ? +value : defaultValue;
};

org.xml3d.initString = function(value, defaultValue) {
	return value ? value : defaultValue;
};

org.xml3d.initInt = function(value, defaultValue) {
	return value ? parseInt(value) : defaultValue;
};

/*
org.xml3d.initBoolean = function(value, defaultValue) {
	return value ? value == "true" : defaultValue;
};
*/

org.xml3d.initBoolean = function(value, defaultValue) {
        return !!value;
};

org.xml3d.initXML3DVec3 = function(value, x, y, z) {
	if (value) {
		var result = new XML3DVec3();
		result.setVec3Value(value);
		return result;
	}
	else return new XML3DVec3(x, y, z);
};

org.xml3d.initXML3DRotation = function(value, x, y, z, angle) {
	var result = new XML3DRotation();
	if (value)
	{
		result.setAxisAngleValue(value);
	}
	else
	{
		result.setAxisAngle(new XML3DVec3(x, y, z), angle);
	}
	return result;
};

org.xml3d.initEnum = function(value, defaultValue, choice)
{
	if(value && typeof(value) == "string" && choice[value.toLowerCase()] !== undefined)
	{
		var index = choice[value.toLowerCase()];
		return choice[index];
	}

	return choice[defaultValue];
};

org.xml3d.initIntArray = function(value, defaultValue) {
	var exp = /([+\-0-9]+)/g;
	return value ? new Int32Array(value.match(exp)) : new Int32Array(defaultValue);
};

org.xml3d.initUInt16Array = function(value, defaultValue) {
	var exp = /([+\-0-9]+)/g;
	return value ? new Uint16Array(value.match(exp)) : new Uint16Array(defaultValue);
};

org.xml3d.initFloatArray = function(value, defaultValue) {
	var exp = /([+\-0-9eE\.]+)/g;
	return value ? new Float32Array(value.match(exp)) :  new Float32Array(defaultValue);
};

org.xml3d.initFloat3Array = function(value, defaultValue) {
	return org.xml3d.initFloatArray(value, defaultValue);
};

org.xml3d.initFloat2Array = function(value, defaultValue) {
	return org.xml3d.initFloatArray(value, defaultValue);
};

org.xml3d.initFloat4Array = function(value, defaultValue) {
	return org.xml3d.initFloatArray(value, defaultValue);
};

org.xml3d.initFloat4x4Array = function(value, defaultValue) {
	return org.xml3d.initFloatArray(value, defaultValue);
};

org.xml3d.initBoolArray = function(value, defaultValue) {
	var converted = value.replace(/(true)/i, "1").replace(/(false)/i, "0");
	return new Uint8Array(converted.match(/\d/i));
};

org.xml3d.initAnyURI = function(node, defaultValue) {
	return org.xml3d.initString(node, defaultValue);
};


//-----------------------------------------------------------------------------
// Checker helper
//-----------------------------------------------------------------------------
org.xml3d.isFloat = function(value)
{
	return typeof value == "number";
};

org.xml3d.isString = function(value)
{
	return typeof value == "string";
};

org.xml3d.isInt = function(value)
{
	return typeof value == "number";
};

org.xml3d.isBoolean = function(value)
{
	return typeof value == "boolean";
};

org.xml3d.isXML3DVec3 = function(value)
{
	return typeof value == "object" && new XML3DVec3().constructor == value.constructor;
};

org.xml3d.isXML3DRotation = function(value, x, y, z, angle)
{
	return typeof value == "object" && new XML3DRotation().constructor == value.constructor;
};

org.xml3d.isEnum = function(value, choice)
{
	return (typeof value == "string" && choice[value.toLowerCase()] != undefined);
};

org.xml3d.isIntArray = function(value)
{
	return typeof value == "object" && new Int32Array().constructor == value.constructor;
};

org.xml3d.isUInt16Array = function(value)
{
	return typeof value == "object" && new Uint16Array().constructor == value.constructor;
};

org.xml3d.isFloatArray = function(value)
{
	return typeof value == "object" && new Float32Array().constructor == value.constructor;
};

org.xml3d.isFloat3Array = function(value)
{
	return org.xml3d.isFloatArray(value);
};

org.xml3d.isFloat2Array = function(value)
{
	return org.xml3d.isFloatArray(value);
};

org.xml3d.isFloat4Array = function(value)
{
	return org.xml3d.isFloatArray(value);
};

org.xml3d.isFloat4x4Array = function(value)
{
	return org.xml3d.isFloatArray(value);
};

org.xml3d.isBoolArray = function(value)
{
	return typeof value == "object" && new Uint8Array().constructor == value.constructor;
};

org.xml3d.isAnyURI = function(node)
{
	return org.xml3d.isString(node);
};

org.xml3d.canvasEvents = {"mousedown":1, "mouseup":1};
org.xml3d.configureXML3DEvents = function(node) {
	node.__proto__.__addEventListener = node.__proto__.addEventListener;
	node.__proto__.__removeEventListener = node.__proto__.removeEventListener;

	node.addEventListener = function(type, listener, useCapture) {
		if(type in org.xml3d.canvasEvents) {
			for (i = 0; i < this.adapters.length; i++) {
				if (this.adapters[i].addEventListener) {
					this.adapters[i].addEventListener(type, listener, useCapture);
				}
			}
		}
		else
			this.__addEventListener(type, listener, useCapture);
	};
	node.removeEventListener = function(type, listener, useCapture) {
		if(type in org.xml3d.canvasEvents) {
			for (i = 0; i < this.adapters.length; i++) {
				if (this.adapters[i].removeEventListener) {
					this.adapters[i].removeEventListener(type, listener, useCapture);
				}
			}
		}
		else
			this.__removeEventListener(type, listener, useCapture);
	};
};

// MeshTypes
org.xml3d.MeshTypes = {};
org.xml3d.MeshTypes["triangles"] = 0;
org.xml3d.MeshTypes[0] = "triangles";
org.xml3d.MeshTypes["trianglestrips"] = 1;
org.xml3d.MeshTypes[1] = "triangleStrips";
// TextureTypes
org.xml3d.TextureTypes = {};
org.xml3d.TextureTypes["2d"] = 0;
org.xml3d.TextureTypes[0] = "2D";
org.xml3d.TextureTypes["1d"] = 1;
org.xml3d.TextureTypes[1] = "1D";
org.xml3d.TextureTypes["3d"] = 2;
org.xml3d.TextureTypes[2] = "3D";
// FilterTypes
org.xml3d.FilterTypes = {};
org.xml3d.FilterTypes["none"] = 0;
org.xml3d.FilterTypes[0] = "none";
org.xml3d.FilterTypes["nearest"] = 1;
org.xml3d.FilterTypes[1] = "nearest";
org.xml3d.FilterTypes["linear"] = 2;
org.xml3d.FilterTypes[2] = "linear";
// WrapTypes
org.xml3d.WrapTypes = {};
org.xml3d.WrapTypes["clamp"] = 0;
org.xml3d.WrapTypes[0] = "clamp";
org.xml3d.WrapTypes["repeat"] = 1;
org.xml3d.WrapTypes[1] = "repeat";
org.xml3d.WrapTypes["border"] = 2;
org.xml3d.WrapTypes[2] = "border";

// Initialize methods
org.xml3d.event.UNHANDLED = 1;
org.xml3d.event.HANDLED = 2;


/**
 * Register class for element <Xml3dNode>
 */
org.xml3d.classInfo.Xml3dNode = function(node, c)
{
	node.xml3ddocument = c.doc;
	node.adapters      = [];

	node.addAdapter = function(adapter)
	{
		this.adapters.push(adapter);
	};

	node.getTextContent = function()
	{
		var str = "";
		var k   = this.firstChild;

		while(k)
		{
			if (k.nodeType == 3)
			{
				str += k.textContent;
			}

			k = k.nextSibling;
		}
		return str;
	};

	node.notificationRequired = function ()
	{
		return this.adapters.length != 0;
	};

	node.notify = function (notification)
	{
		for(var i= 0; i < this.adapters.length; i++)
		{
		  this.adapters[i].notifyChanged(notification);
		}
	};

	node.update = function()
	{
		//if (this.adapters[0])
		//	this.adapters[0].factory.ctx.redraw("xml3d::update");
 	};

	node.setField = function(event)
	{
		return org.xml3d.event.UNHANDLED;
	};

	node.evalMethod = function(evtMethod)
	{
		if (evtMethod)
			eval(evtMethod);
	};
};

/**
 * Object org.xml3d.classInfo.xml3d()
 *
 * @augments org.xml3d.classInfo.XML3DBaseType
 * @constructor
 * @see org.xml3d.classInfo.XML3DBaseType
 */
org.xml3d.classInfo.xml3d = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);

	org.xml3d.configureXML3DEvents(node);


	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("onclick", function (value)
	{
		var oldValue = this._onclick;

		if(org.xml3d.isString(value))
		{
			this._onclick = value;
		}
		else
		{
			this._onclick = org.xml3d.initString(value, "");
		}

	    if(this._onclick != null && this._onclick.setOwnerNode)
		{
			this._onclick.setOwnerNode("onclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onclick", oldValue, this._onclick));
		}
	});

	node.__defineGetter__("onclick", function (value)
	{
		return this._onclick;
	});

	node.__defineSetter__("ondblclick", function (value)
	{
		var oldValue = this._ondblclick;

		if(org.xml3d.isString(value))
		{
			this._ondblclick = value;
		}
		else
		{
			this._ondblclick = org.xml3d.initString(value, "");
		}

	    if(this._ondblclick != null && this._ondblclick.setOwnerNode)
		{
			this._ondblclick.setOwnerNode("ondblclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.ondblclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "ondblclick", oldValue, this._ondblclick));
		}
	});

	node.__defineGetter__("ondblclick", function (value)
	{
		return this._ondblclick;
	});

	node.__defineSetter__("onmousedown", function (value)
	{
		var oldValue = this._onmousedown;

		if(org.xml3d.isString(value))
		{
			this._onmousedown = value;
		}
		else
		{
			this._onmousedown = org.xml3d.initString(value, "");
		}

	    if(this._onmousedown != null && this._onmousedown.setOwnerNode)
		{
			this._onmousedown.setOwnerNode("onmousedown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousedown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousedown", oldValue, this._onmousedown));
		}
	});

	node.__defineGetter__("onmousedown", function (value)
	{
		return this._onmousedown;
	});

	node.__defineSetter__("onmouseup", function (value)
	{
		var oldValue = this._onmouseup;

		if(org.xml3d.isString(value))
		{
			this._onmouseup = value;
		}
		else
		{
			this._onmouseup = org.xml3d.initString(value, "");
		}

	    if(this._onmouseup != null && this._onmouseup.setOwnerNode)
		{
			this._onmouseup.setOwnerNode("onmouseup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseup", oldValue, this._onmouseup));
		}
	});

	node.__defineGetter__("onmouseup", function (value)
	{
		return this._onmouseup;
	});

	node.__defineSetter__("onmouseover", function (value)
	{
		var oldValue = this._onmouseover;

		if(org.xml3d.isString(value))
		{
			this._onmouseover = value;
		}
		else
		{
			this._onmouseover = org.xml3d.initString(value, "");
		}

	    if(this._onmouseover != null && this._onmouseover.setOwnerNode)
		{
			this._onmouseover.setOwnerNode("onmouseover", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseover))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseover", oldValue, this._onmouseover));
		}
	});

	node.__defineGetter__("onmouseover", function (value)
	{
		return this._onmouseover;
	});

	node.__defineSetter__("onmousemove", function (value)
	{
		var oldValue = this._onmousemove;

		if(org.xml3d.isString(value))
		{
			this._onmousemove = value;
		}
		else
		{
			this._onmousemove = org.xml3d.initString(value, "");
		}

	    if(this._onmousemove != null && this._onmousemove.setOwnerNode)
		{
			this._onmousemove.setOwnerNode("onmousemove", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousemove))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousemove", oldValue, this._onmousemove));
		}
	});

	node.__defineGetter__("onmousemove", function (value)
	{
		return this._onmousemove;
	});

	node.__defineSetter__("onmouseout", function (value)
	{
		var oldValue = this._onmouseout;

		if(org.xml3d.isString(value))
		{
			this._onmouseout = value;
		}
		else
		{
			this._onmouseout = org.xml3d.initString(value, "");
		}

	    if(this._onmouseout != null && this._onmouseout.setOwnerNode)
		{
			this._onmouseout.setOwnerNode("onmouseout", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseout))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseout", oldValue, this._onmouseout));
		}
	});

	node.__defineGetter__("onmouseout", function (value)
	{
		return this._onmouseout;
	});

	node.__defineSetter__("onkeypress", function (value)
	{
		var oldValue = this._onkeypress;

		if(org.xml3d.isString(value))
		{
			this._onkeypress = value;
		}
		else
		{
			this._onkeypress = org.xml3d.initString(value, "");
		}

	    if(this._onkeypress != null && this._onkeypress.setOwnerNode)
		{
			this._onkeypress.setOwnerNode("onkeypress", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeypress))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeypress", oldValue, this._onkeypress));
		}
	});

	node.__defineGetter__("onkeypress", function (value)
	{
		return this._onkeypress;
	});

	node.__defineSetter__("onkeydown", function (value)
	{
		var oldValue = this._onkeydown;

		if(org.xml3d.isString(value))
		{
			this._onkeydown = value;
		}
		else
		{
			this._onkeydown = org.xml3d.initString(value, "");
		}

	    if(this._onkeydown != null && this._onkeydown.setOwnerNode)
		{
			this._onkeydown.setOwnerNode("onkeydown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeydown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeydown", oldValue, this._onkeydown));
		}
	});

	node.__defineGetter__("onkeydown", function (value)
	{
		return this._onkeydown;
	});

	node.__defineSetter__("onkeyup", function (value)
	{
		var oldValue = this._onkeyup;

		if(org.xml3d.isString(value))
		{
			this._onkeyup = value;
		}
		else
		{
			this._onkeyup = org.xml3d.initString(value, "");
		}

	    if(this._onkeyup != null && this._onkeyup.setOwnerNode)
		{
			this._onkeyup.setOwnerNode("onkeyup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeyup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeyup", oldValue, this._onkeyup));
		}
	});

	node.__defineGetter__("onkeyup", function (value)
	{
		return this._onkeyup;
	});

	node.__defineSetter__("height", function (value)
	{
		var oldValue = this._height;

		if(org.xml3d.isInt(value))
		{
			this._height = value;
		}
		else
		{
			this._height = org.xml3d.initInt(value, 600);
		}

	    if(this._height != null && this._height.setOwnerNode)
		{
			this._height.setOwnerNode("height", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.height))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "height", oldValue, this._height));
		}
	});

	node.__defineGetter__("height", function (value)
	{
		return this._height;
	});

	node.__defineSetter__("width", function (value)
	{
		var oldValue = this._width;

		if(org.xml3d.isInt(value))
		{
			this._width = value;
		}
		else
		{
			this._width = org.xml3d.initInt(value, 800);
		}

	    if(this._width != null && this._width.setOwnerNode)
		{
			this._width.setOwnerNode("width", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.width))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "width", oldValue, this._width));
		}
	});

	node.__defineGetter__("width", function (value)
	{
		return this._width;
	});





	node.__defineSetter__("activeView", function (value)
	{
		var oldValue = this._activeView;

		if(org.xml3d.isString(value))
		{
			this._activeView = value;
		}
		else
		{
			this._activeView = org.xml3d.initString(value, "");
		}

	    this._activeViewNode = null;

	    if(this._activeView != null && this._activeView.setOwnerNode)
		{
			this._activeView.setOwnerNode("activeView", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._activeView))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "activeView", oldValue, this._activeView));
		}
	});

	node.__defineGetter__("activeView", function (value)
	{
		//return this._activeView;
		return this.getAttribute("activeView");
	});



	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "ondblclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.ondblclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousedown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousedown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseover")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseover = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousemove")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousemove = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseout")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseout = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeypress")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeypress = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeydown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeydown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeyup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeyup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "height")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.height = org.xml3d.initInt("", 600);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "width")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.width = org.xml3d.initInt("", 800);
			return org.xml3d.event.HANDLED;
		}

		if(attrName == "activeView")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.activeView = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._onclick = org.xml3d.initString(node.getAttribute("onclick"), "");
	if(node._onclick != null && node._onclick.setOwnerNode)
	{
		node._onclick.setOwnerNode("onclick", node);
	}
	node._ondblclick = org.xml3d.initString(node.getAttribute("ondblclick"), "");
	if(node._ondblclick != null && node._ondblclick.setOwnerNode)
	{
		node._ondblclick.setOwnerNode("ondblclick", node);
	}
	node._onmousedown = org.xml3d.initString(node.getAttribute("onmousedown"), "");
	if(node._onmousedown != null && node._onmousedown.setOwnerNode)
	{
		node._onmousedown.setOwnerNode("onmousedown", node);
	}
	node._onmouseup = org.xml3d.initString(node.getAttribute("onmouseup"), "");
	if(node._onmouseup != null && node._onmouseup.setOwnerNode)
	{
		node._onmouseup.setOwnerNode("onmouseup", node);
	}
	node._onmouseover = org.xml3d.initString(node.getAttribute("onmouseover"), "");
	if(node._onmouseover != null && node._onmouseover.setOwnerNode)
	{
		node._onmouseover.setOwnerNode("onmouseover", node);
	}
	node._onmousemove = org.xml3d.initString(node.getAttribute("onmousemove"), "");
	if(node._onmousemove != null && node._onmousemove.setOwnerNode)
	{
		node._onmousemove.setOwnerNode("onmousemove", node);
	}
	node._onmouseout = org.xml3d.initString(node.getAttribute("onmouseout"), "");
	if(node._onmouseout != null && node._onmouseout.setOwnerNode)
	{
		node._onmouseout.setOwnerNode("onmouseout", node);
	}
	node._onkeypress = org.xml3d.initString(node.getAttribute("onkeypress"), "");
	if(node._onkeypress != null && node._onkeypress.setOwnerNode)
	{
		node._onkeypress.setOwnerNode("onkeypress", node);
	}
	node._onkeydown = org.xml3d.initString(node.getAttribute("onkeydown"), "");
	if(node._onkeydown != null && node._onkeydown.setOwnerNode)
	{
		node._onkeydown.setOwnerNode("onkeydown", node);
	}
	node._onkeyup = org.xml3d.initString(node.getAttribute("onkeyup"), "");
	if(node._onkeyup != null && node._onkeyup.setOwnerNode)
	{
		node._onkeyup.setOwnerNode("onkeyup", node);
	}
	node._height = org.xml3d.initInt(node.getAttribute("height"), 600);
	if(node._height != null && node._height.setOwnerNode)
	{
		node._height.setOwnerNode("height", node);
	}
	node._width = org.xml3d.initInt(node.getAttribute("width"), 800);
	if(node._width != null && node._width.setOwnerNode)
	{
		node._width.setOwnerNode("width", node);
	}

	//node.definitionArea = [];
	//node.graph = [];



	node.getActiveViewNode = function()
	{
		if (!this._activeViewNode && this.hasAttribute("activeView"))
		{
		  this._activeViewNode = this.xml3ddocument.resolve(this.getAttribute("activeView"));
		}
		return this._activeViewNode;
	};





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onclick")
		{
			this.onclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "ondblclick")
		{
			this.ondblclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousedown")
		{
			this.onmousedown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseup")
		{
			this.onmouseup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseover")
		{
			this.onmouseover = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousemove")
		{
			this.onmousemove = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseout")
		{
			this.onmouseout = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeypress")
		{
			this.onkeypress = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeydown")
		{
			this.onkeydown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeyup")
		{
			this.onkeyup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "height")
		{
			this.height = org.xml3d.initInt(event.newValue, 600);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "width")
		{
			this.width = org.xml3d.initInt(event.newValue, 800);
			return org.xml3d.event.HANDLED;
		}



		if (event.attrName == "activeView")
		{
			this.activeView = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

		node.createXML3DVec3 = org.xml3d.methods.xml3dCreateXML3DVec3;
		node.createXML3DRotation = org.xml3d.methods.xml3dCreateXML3DRotation;
		node.createXML3DMatrix = org.xml3d.methods.xml3dCreateXML3DMatrix;
		node.createXML3DRay = org.xml3d.methods.xml3dCreateXML3DRay;
		node.getElementByPoint = org.xml3d.methods.xml3dGetElementByPoint;

};
/**
 * Object org.xml3d.classInfo.data()
 *
 * @augments org.xml3d.classInfo.XML3DNestedDataContainerType
 * @constructor
 * @see org.xml3d.classInfo.XML3DNestedDataContainerType
 */
org.xml3d.classInfo.data = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("map", function (value)
	{
		var oldValue = this._map;

		if(org.xml3d.isString(value))
		{
			this._map = value;
		}
		else
		{
			this._map = org.xml3d.initString(value, "");
		}

	    if(this._map != null && this._map.setOwnerNode)
		{
			this._map.setOwnerNode("map", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.map))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "map", oldValue, this._map));
		}
	});

	node.__defineGetter__("map", function (value)
	{
		return this._map;
	});

	node.__defineSetter__("expose", function (value)
	{
		var oldValue = this._expose;

		if(org.xml3d.isString(value))
		{
			this._expose = value;
		}
		else
		{
			this._expose = org.xml3d.initString(value, "");
		}

	    if(this._expose != null && this._expose.setOwnerNode)
		{
			this._expose.setOwnerNode("expose", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.expose))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "expose", oldValue, this._expose));
		}
	});

	node.__defineGetter__("expose", function (value)
	{
		return this._expose;
	});





	node.__defineSetter__("src", function (value)
	{
		var oldValue = this._src;

		if(org.xml3d.isString(value))
		{
			this._src = value;
		}
		else
		{
			this._src = org.xml3d.initString(value, "");
		}

	    this._srcNode = null;

	    if(this._src != null && this._src.setOwnerNode)
		{
			this._src.setOwnerNode("src", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._src))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "src", oldValue, this._src));
		}
	});

	node.__defineGetter__("src", function (value)
	{
		//return this._src;
		return this.getAttribute("src");
	});

	node.__defineSetter__("script", function (value)
	{
		var oldValue = this._script;

		if(org.xml3d.isString(value))
		{
			this._script = value;
		}
		else
		{
			this._script = org.xml3d.initString(value, "");
		}

	    this._scriptNode = null;

	    if(this._script != null && this._script.setOwnerNode)
		{
			this._script.setOwnerNode("script", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._script))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "script", oldValue, this._script));
		}
	});

	node.__defineGetter__("script", function (value)
	{
		//return this._script;
		return this.getAttribute("script");
	});



	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "map")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.map = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "expose")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.expose = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		if(attrName == "src")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.src = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "script")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.script = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._map = org.xml3d.initString(node.getAttribute("map"), "");
	if(node._map != null && node._map.setOwnerNode)
	{
		node._map.setOwnerNode("map", node);
	}
	node._expose = org.xml3d.initString(node.getAttribute("expose"), "");
	if(node._expose != null && node._expose.setOwnerNode)
	{
		node._expose.setOwnerNode("expose", node);
	}

	//node.sources = [];
	//node.childContainers = [];



	node.getSrcNode = function()
	{
		if (!this._srcNode && this.hasAttribute("src"))
		{
		  this._srcNode = this.xml3ddocument.resolve(this.getAttribute("src"));
		}
		return this._srcNode;
	};




	node.getScriptNode = function()
	{
		if (!this._scriptNode && this.hasAttribute("script"))
		{
		  this._scriptNode = this.xml3ddocument.resolve(this.getAttribute("script"));
		}
		return this._scriptNode;
	};





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "map")
		{
			this.map = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "expose")
		{
			this.expose = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}



		if (event.attrName == "src")
		{
			this.src = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}
		if (event.attrName == "script")
		{
			this.script = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.defs()
 *
 * @augments org.xml3d.classInfo.XML3DBaseType
 * @constructor
 * @see org.xml3d.classInfo.XML3DBaseType
 */
org.xml3d.classInfo.defs = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});







	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}

	//node.children = [];




	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}





		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.group()
 *
 * @augments org.xml3d.classInfo.XML3DGraphType
 * @constructor
 * @see org.xml3d.classInfo.XML3DGraphType
 */
org.xml3d.classInfo.group = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("onclick", function (value)
	{
		var oldValue = this._onclick;

		if(org.xml3d.isString(value))
		{
			this._onclick = value;
		}
		else
		{
			this._onclick = org.xml3d.initString(value, "");
		}

	    if(this._onclick != null && this._onclick.setOwnerNode)
		{
			this._onclick.setOwnerNode("onclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onclick", oldValue, this._onclick));
		}
	});

	node.__defineGetter__("onclick", function (value)
	{
		return this._onclick;
	});

	node.__defineSetter__("ondblclick", function (value)
	{
		var oldValue = this._ondblclick;

		if(org.xml3d.isString(value))
		{
			this._ondblclick = value;
		}
		else
		{
			this._ondblclick = org.xml3d.initString(value, "");
		}

	    if(this._ondblclick != null && this._ondblclick.setOwnerNode)
		{
			this._ondblclick.setOwnerNode("ondblclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.ondblclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "ondblclick", oldValue, this._ondblclick));
		}
	});

	node.__defineGetter__("ondblclick", function (value)
	{
		return this._ondblclick;
	});

	node.__defineSetter__("onmousedown", function (value)
	{
		var oldValue = this._onmousedown;

		if(org.xml3d.isString(value))
		{
			this._onmousedown = value;
		}
		else
		{
			this._onmousedown = org.xml3d.initString(value, "");
		}

	    if(this._onmousedown != null && this._onmousedown.setOwnerNode)
		{
			this._onmousedown.setOwnerNode("onmousedown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousedown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousedown", oldValue, this._onmousedown));
		}
	});

	node.__defineGetter__("onmousedown", function (value)
	{
		return this._onmousedown;
	});

	node.__defineSetter__("onmouseup", function (value)
	{
		var oldValue = this._onmouseup;

		if(org.xml3d.isString(value))
		{
			this._onmouseup = value;
		}
		else
		{
			this._onmouseup = org.xml3d.initString(value, "");
		}

	    if(this._onmouseup != null && this._onmouseup.setOwnerNode)
		{
			this._onmouseup.setOwnerNode("onmouseup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseup", oldValue, this._onmouseup));
		}
	});

	node.__defineGetter__("onmouseup", function (value)
	{
		return this._onmouseup;
	});

	node.__defineSetter__("onmouseover", function (value)
	{
		var oldValue = this._onmouseover;

		if(org.xml3d.isString(value))
		{
			this._onmouseover = value;
		}
		else
		{
			this._onmouseover = org.xml3d.initString(value, "");
		}

	    if(this._onmouseover != null && this._onmouseover.setOwnerNode)
		{
			this._onmouseover.setOwnerNode("onmouseover", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseover))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseover", oldValue, this._onmouseover));
		}
	});

	node.__defineGetter__("onmouseover", function (value)
	{
		return this._onmouseover;
	});

	node.__defineSetter__("onmousemove", function (value)
	{
		var oldValue = this._onmousemove;

		if(org.xml3d.isString(value))
		{
			this._onmousemove = value;
		}
		else
		{
			this._onmousemove = org.xml3d.initString(value, "");
		}

	    if(this._onmousemove != null && this._onmousemove.setOwnerNode)
		{
			this._onmousemove.setOwnerNode("onmousemove", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousemove))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousemove", oldValue, this._onmousemove));
		}
	});

	node.__defineGetter__("onmousemove", function (value)
	{
		return this._onmousemove;
	});

	node.__defineSetter__("onmouseout", function (value)
	{
		var oldValue = this._onmouseout;

		if(org.xml3d.isString(value))
		{
			this._onmouseout = value;
		}
		else
		{
			this._onmouseout = org.xml3d.initString(value, "");
		}

	    if(this._onmouseout != null && this._onmouseout.setOwnerNode)
		{
			this._onmouseout.setOwnerNode("onmouseout", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseout))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseout", oldValue, this._onmouseout));
		}
	});

	node.__defineGetter__("onmouseout", function (value)
	{
		return this._onmouseout;
	});

	node.__defineSetter__("onkeypress", function (value)
	{
		var oldValue = this._onkeypress;

		if(org.xml3d.isString(value))
		{
			this._onkeypress = value;
		}
		else
		{
			this._onkeypress = org.xml3d.initString(value, "");
		}

	    if(this._onkeypress != null && this._onkeypress.setOwnerNode)
		{
			this._onkeypress.setOwnerNode("onkeypress", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeypress))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeypress", oldValue, this._onkeypress));
		}
	});

	node.__defineGetter__("onkeypress", function (value)
	{
		return this._onkeypress;
	});

	node.__defineSetter__("onkeydown", function (value)
	{
		var oldValue = this._onkeydown;

		if(org.xml3d.isString(value))
		{
			this._onkeydown = value;
		}
		else
		{
			this._onkeydown = org.xml3d.initString(value, "");
		}

	    if(this._onkeydown != null && this._onkeydown.setOwnerNode)
		{
			this._onkeydown.setOwnerNode("onkeydown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeydown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeydown", oldValue, this._onkeydown));
		}
	});

	node.__defineGetter__("onkeydown", function (value)
	{
		return this._onkeydown;
	});

	node.__defineSetter__("onkeyup", function (value)
	{
		var oldValue = this._onkeyup;

		if(org.xml3d.isString(value))
		{
			this._onkeyup = value;
		}
		else
		{
			this._onkeyup = org.xml3d.initString(value, "");
		}

	    if(this._onkeyup != null && this._onkeyup.setOwnerNode)
		{
			this._onkeyup.setOwnerNode("onkeyup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeyup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeyup", oldValue, this._onkeyup));
		}
	});

	node.__defineGetter__("onkeyup", function (value)
	{
		return this._onkeyup;
	});

	node.__defineSetter__("visible", function (value)
	{
		var oldValue = this._visible;

		if(org.xml3d.isBoolean(value))
		{
			this._visible = value;
		}
		else
		{
			this._visible = org.xml3d.initBoolean(value, true);
		}

	    if(this._visible != null && this._visible.setOwnerNode)
		{
			this._visible.setOwnerNode("visible", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.visible))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "visible", oldValue, this._visible));
		}
	});

	node.__defineGetter__("visible", function (value)
	{
		return this._visible;
	});





	node.__defineSetter__("transform", function (value)
	{
		var oldValue = this._transform;

		if(org.xml3d.isString(value))
		{
			this._transform = value;
		}
		else
		{
			this._transform = org.xml3d.initString(value, "");
		}

	    this._transformNode = null;

	    if(this._transform != null && this._transform.setOwnerNode)
		{
			this._transform.setOwnerNode("transform", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._transform))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "transform", oldValue, this._transform));
		}
	});

	node.__defineGetter__("transform", function (value)
	{
		//return this._transform;
		return this.getAttribute("transform");
	});

	node.__defineSetter__("shader", function (value)
	{
		var oldValue = this._shader;

		if(org.xml3d.isString(value))
		{
			this._shader = value;
		}
		else
		{
			this._shader = org.xml3d.initString(value, "");
		}

	    this._shaderNode = null;

	    if(this._shader != null && this._shader.setOwnerNode)
		{
			this._shader.setOwnerNode("shader", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._shader))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "shader", oldValue, this._shader));
		}
	});

	node.__defineGetter__("shader", function (value)
	{
		//return this._shader;
		return this.getAttribute("shader");
	});



	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "ondblclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.ondblclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousedown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousedown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseover")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseover = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousemove")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousemove = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseout")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseout = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeypress")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeypress = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeydown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeydown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeyup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeyup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "visible")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.visible = org.xml3d.initBoolean("", true);
			return org.xml3d.event.HANDLED;
		}

		if(attrName == "transform")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.transform = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "shader")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.shader = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._onclick = org.xml3d.initString(node.getAttribute("onclick"), "");
	if(node._onclick != null && node._onclick.setOwnerNode)
	{
		node._onclick.setOwnerNode("onclick", node);
	}
	node._ondblclick = org.xml3d.initString(node.getAttribute("ondblclick"), "");
	if(node._ondblclick != null && node._ondblclick.setOwnerNode)
	{
		node._ondblclick.setOwnerNode("ondblclick", node);
	}
	node._onmousedown = org.xml3d.initString(node.getAttribute("onmousedown"), "");
	if(node._onmousedown != null && node._onmousedown.setOwnerNode)
	{
		node._onmousedown.setOwnerNode("onmousedown", node);
	}
	node._onmouseup = org.xml3d.initString(node.getAttribute("onmouseup"), "");
	if(node._onmouseup != null && node._onmouseup.setOwnerNode)
	{
		node._onmouseup.setOwnerNode("onmouseup", node);
	}
	node._onmouseover = org.xml3d.initString(node.getAttribute("onmouseover"), "");
	if(node._onmouseover != null && node._onmouseover.setOwnerNode)
	{
		node._onmouseover.setOwnerNode("onmouseover", node);
	}
	node._onmousemove = org.xml3d.initString(node.getAttribute("onmousemove"), "");
	if(node._onmousemove != null && node._onmousemove.setOwnerNode)
	{
		node._onmousemove.setOwnerNode("onmousemove", node);
	}
	node._onmouseout = org.xml3d.initString(node.getAttribute("onmouseout"), "");
	if(node._onmouseout != null && node._onmouseout.setOwnerNode)
	{
		node._onmouseout.setOwnerNode("onmouseout", node);
	}
	node._onkeypress = org.xml3d.initString(node.getAttribute("onkeypress"), "");
	if(node._onkeypress != null && node._onkeypress.setOwnerNode)
	{
		node._onkeypress.setOwnerNode("onkeypress", node);
	}
	node._onkeydown = org.xml3d.initString(node.getAttribute("onkeydown"), "");
	if(node._onkeydown != null && node._onkeydown.setOwnerNode)
	{
		node._onkeydown.setOwnerNode("onkeydown", node);
	}
	node._onkeyup = org.xml3d.initString(node.getAttribute("onkeyup"), "");
	if(node._onkeyup != null && node._onkeyup.setOwnerNode)
	{
		node._onkeyup.setOwnerNode("onkeyup", node);
	}
	node._visible = org.xml3d.initBoolean(node.getAttribute("visible"), true);
	if(node._visible != null && node._visible.setOwnerNode)
	{
		node._visible.setOwnerNode("visible", node);
	}

	//node.children = [];
	//node.defs = [];



	node.getTransformNode = function()
	{
		if (!this._transformNode && this.hasAttribute("transform"))
		{
		  this._transformNode = this.xml3ddocument.resolve(this.getAttribute("transform"));
		}
		return this._transformNode;
	};




	node.getShaderNode = function()
	{
		if (!this._shaderNode && this.hasAttribute("shader"))
		{
		  this._shaderNode = this.xml3ddocument.resolve(this.getAttribute("shader"));
		}
		return this._shaderNode;
	};





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onclick")
		{
			this.onclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "ondblclick")
		{
			this.ondblclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousedown")
		{
			this.onmousedown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseup")
		{
			this.onmouseup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseover")
		{
			this.onmouseover = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousemove")
		{
			this.onmousemove = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseout")
		{
			this.onmouseout = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeypress")
		{
			this.onkeypress = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeydown")
		{
			this.onkeydown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeyup")
		{
			this.onkeyup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "visible")
		{
			this.visible = org.xml3d.initBoolean(event.newValue, true);
			return org.xml3d.event.HANDLED;
		}



		if (event.attrName == "transform")
		{
			this.transform = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}
		if (event.attrName == "shader")
		{
			this.shader = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

		node.getWorldMatrix = org.xml3d.methods.XML3DGraphTypeGetWorldMatrix;
		node.getLocalMatrix = org.xml3d.methods.groupGetLocalMatrix;

};
/**
 * Object org.xml3d.classInfo.mesh()
 *
 * @augments org.xml3d.classInfo.XML3DGeometryType
 * @constructor
 * @see org.xml3d.classInfo.XML3DGeometryType
 */
org.xml3d.classInfo.mesh = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("onclick", function (value)
	{
		var oldValue = this._onclick;

		if(org.xml3d.isString(value))
		{
			this._onclick = value;
		}
		else
		{
			this._onclick = org.xml3d.initString(value, "");
		}

	    if(this._onclick != null && this._onclick.setOwnerNode)
		{
			this._onclick.setOwnerNode("onclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onclick", oldValue, this._onclick));
		}
	});

	node.__defineGetter__("onclick", function (value)
	{
		return this._onclick;
	});

	node.__defineSetter__("ondblclick", function (value)
	{
		var oldValue = this._ondblclick;

		if(org.xml3d.isString(value))
		{
			this._ondblclick = value;
		}
		else
		{
			this._ondblclick = org.xml3d.initString(value, "");
		}

	    if(this._ondblclick != null && this._ondblclick.setOwnerNode)
		{
			this._ondblclick.setOwnerNode("ondblclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.ondblclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "ondblclick", oldValue, this._ondblclick));
		}
	});

	node.__defineGetter__("ondblclick", function (value)
	{
		return this._ondblclick;
	});

	node.__defineSetter__("onmousedown", function (value)
	{
		var oldValue = this._onmousedown;

		if(org.xml3d.isString(value))
		{
			this._onmousedown = value;
		}
		else
		{
			this._onmousedown = org.xml3d.initString(value, "");
		}

	    if(this._onmousedown != null && this._onmousedown.setOwnerNode)
		{
			this._onmousedown.setOwnerNode("onmousedown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousedown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousedown", oldValue, this._onmousedown));
		}
	});

	node.__defineGetter__("onmousedown", function (value)
	{
		return this._onmousedown;
	});

	node.__defineSetter__("onmouseup", function (value)
	{
		var oldValue = this._onmouseup;

		if(org.xml3d.isString(value))
		{
			this._onmouseup = value;
		}
		else
		{
			this._onmouseup = org.xml3d.initString(value, "");
		}

	    if(this._onmouseup != null && this._onmouseup.setOwnerNode)
		{
			this._onmouseup.setOwnerNode("onmouseup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseup", oldValue, this._onmouseup));
		}
	});

	node.__defineGetter__("onmouseup", function (value)
	{
		return this._onmouseup;
	});

	node.__defineSetter__("onmouseover", function (value)
	{
		var oldValue = this._onmouseover;

		if(org.xml3d.isString(value))
		{
			this._onmouseover = value;
		}
		else
		{
			this._onmouseover = org.xml3d.initString(value, "");
		}

	    if(this._onmouseover != null && this._onmouseover.setOwnerNode)
		{
			this._onmouseover.setOwnerNode("onmouseover", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseover))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseover", oldValue, this._onmouseover));
		}
	});

	node.__defineGetter__("onmouseover", function (value)
	{
		return this._onmouseover;
	});

	node.__defineSetter__("onmousemove", function (value)
	{
		var oldValue = this._onmousemove;

		if(org.xml3d.isString(value))
		{
			this._onmousemove = value;
		}
		else
		{
			this._onmousemove = org.xml3d.initString(value, "");
		}

	    if(this._onmousemove != null && this._onmousemove.setOwnerNode)
		{
			this._onmousemove.setOwnerNode("onmousemove", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousemove))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousemove", oldValue, this._onmousemove));
		}
	});

	node.__defineGetter__("onmousemove", function (value)
	{
		return this._onmousemove;
	});

	node.__defineSetter__("onmouseout", function (value)
	{
		var oldValue = this._onmouseout;

		if(org.xml3d.isString(value))
		{
			this._onmouseout = value;
		}
		else
		{
			this._onmouseout = org.xml3d.initString(value, "");
		}

	    if(this._onmouseout != null && this._onmouseout.setOwnerNode)
		{
			this._onmouseout.setOwnerNode("onmouseout", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseout))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseout", oldValue, this._onmouseout));
		}
	});

	node.__defineGetter__("onmouseout", function (value)
	{
		return this._onmouseout;
	});

	node.__defineSetter__("onkeypress", function (value)
	{
		var oldValue = this._onkeypress;

		if(org.xml3d.isString(value))
		{
			this._onkeypress = value;
		}
		else
		{
			this._onkeypress = org.xml3d.initString(value, "");
		}

	    if(this._onkeypress != null && this._onkeypress.setOwnerNode)
		{
			this._onkeypress.setOwnerNode("onkeypress", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeypress))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeypress", oldValue, this._onkeypress));
		}
	});

	node.__defineGetter__("onkeypress", function (value)
	{
		return this._onkeypress;
	});

	node.__defineSetter__("onkeydown", function (value)
	{
		var oldValue = this._onkeydown;

		if(org.xml3d.isString(value))
		{
			this._onkeydown = value;
		}
		else
		{
			this._onkeydown = org.xml3d.initString(value, "");
		}

	    if(this._onkeydown != null && this._onkeydown.setOwnerNode)
		{
			this._onkeydown.setOwnerNode("onkeydown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeydown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeydown", oldValue, this._onkeydown));
		}
	});

	node.__defineGetter__("onkeydown", function (value)
	{
		return this._onkeydown;
	});

	node.__defineSetter__("onkeyup", function (value)
	{
		var oldValue = this._onkeyup;

		if(org.xml3d.isString(value))
		{
			this._onkeyup = value;
		}
		else
		{
			this._onkeyup = org.xml3d.initString(value, "");
		}

	    if(this._onkeyup != null && this._onkeyup.setOwnerNode)
		{
			this._onkeyup.setOwnerNode("onkeyup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeyup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeyup", oldValue, this._onkeyup));
		}
	});

	node.__defineGetter__("onkeyup", function (value)
	{
		return this._onkeyup;
	});

	node.__defineSetter__("visible", function (value)
	{
		var oldValue = this._visible;

		if(org.xml3d.isBoolean(value))
		{
			this._visible = value;
		}
		else
		{
			this._visible = org.xml3d.initBoolean(value, true);
		}

	    if(this._visible != null && this._visible.setOwnerNode)
		{
			this._visible.setOwnerNode("visible", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.visible))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "visible", oldValue, this._visible));
		}
	});

	node.__defineGetter__("visible", function (value)
	{
		return this._visible;
	});

	node.__defineSetter__("type", function (value)
	{
		var oldValue = this._type;

		if(org.xml3d.isEnum(value, org.xml3d.MeshTypes))
		{
			this._type = value;
		}
		else
		{
			this._type = org.xml3d.initEnum(value, 0, org.xml3d.MeshTypes);
		}

	    if(this._type != null && this._type.setOwnerNode)
		{
			this._type.setOwnerNode("type", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.type))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "type", oldValue, this._type));
		}
	});

	node.__defineGetter__("type", function (value)
	{
		return this._type;
	});





	node.__defineSetter__("src", function (value)
	{
		var oldValue = this._src;

		if(org.xml3d.isString(value))
		{
			this._src = value;
		}
		else
		{
			this._src = org.xml3d.initString(value, "");
		}

	    this._srcNode = null;

	    if(this._src != null && this._src.setOwnerNode)
		{
			this._src.setOwnerNode("src", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._src))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "src", oldValue, this._src));
		}
	});

	node.__defineGetter__("src", function (value)
	{
		//return this._src;
		return this.getAttribute("src");
	});



	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "ondblclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.ondblclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousedown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousedown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseover")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseover = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousemove")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousemove = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseout")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseout = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeypress")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeypress = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeydown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeydown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeyup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeyup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "visible")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.visible = org.xml3d.initBoolean("", true);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "type")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.type = org.xml3d.initEnum("", 0, org.xml3d.MeshTypes);
			return org.xml3d.event.HANDLED;
		}

		if(attrName == "src")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.src = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._onclick = org.xml3d.initString(node.getAttribute("onclick"), "");
	if(node._onclick != null && node._onclick.setOwnerNode)
	{
		node._onclick.setOwnerNode("onclick", node);
	}
	node._ondblclick = org.xml3d.initString(node.getAttribute("ondblclick"), "");
	if(node._ondblclick != null && node._ondblclick.setOwnerNode)
	{
		node._ondblclick.setOwnerNode("ondblclick", node);
	}
	node._onmousedown = org.xml3d.initString(node.getAttribute("onmousedown"), "");
	if(node._onmousedown != null && node._onmousedown.setOwnerNode)
	{
		node._onmousedown.setOwnerNode("onmousedown", node);
	}
	node._onmouseup = org.xml3d.initString(node.getAttribute("onmouseup"), "");
	if(node._onmouseup != null && node._onmouseup.setOwnerNode)
	{
		node._onmouseup.setOwnerNode("onmouseup", node);
	}
	node._onmouseover = org.xml3d.initString(node.getAttribute("onmouseover"), "");
	if(node._onmouseover != null && node._onmouseover.setOwnerNode)
	{
		node._onmouseover.setOwnerNode("onmouseover", node);
	}
	node._onmousemove = org.xml3d.initString(node.getAttribute("onmousemove"), "");
	if(node._onmousemove != null && node._onmousemove.setOwnerNode)
	{
		node._onmousemove.setOwnerNode("onmousemove", node);
	}
	node._onmouseout = org.xml3d.initString(node.getAttribute("onmouseout"), "");
	if(node._onmouseout != null && node._onmouseout.setOwnerNode)
	{
		node._onmouseout.setOwnerNode("onmouseout", node);
	}
	node._onkeypress = org.xml3d.initString(node.getAttribute("onkeypress"), "");
	if(node._onkeypress != null && node._onkeypress.setOwnerNode)
	{
		node._onkeypress.setOwnerNode("onkeypress", node);
	}
	node._onkeydown = org.xml3d.initString(node.getAttribute("onkeydown"), "");
	if(node._onkeydown != null && node._onkeydown.setOwnerNode)
	{
		node._onkeydown.setOwnerNode("onkeydown", node);
	}
	node._onkeyup = org.xml3d.initString(node.getAttribute("onkeyup"), "");
	if(node._onkeyup != null && node._onkeyup.setOwnerNode)
	{
		node._onkeyup.setOwnerNode("onkeyup", node);
	}
	node._visible = org.xml3d.initBoolean(node.getAttribute("visible"), true);
	if(node._visible != null && node._visible.setOwnerNode)
	{
		node._visible.setOwnerNode("visible", node);
	}
	node._type = org.xml3d.initEnum(node.getAttribute("type"), 0, org.xml3d.MeshTypes);
	if(node._type != null && node._type.setOwnerNode)
	{
		node._type.setOwnerNode("type", node);
	}

	//node.sources = [];
	//node.childContainers = [];



	node.getSrcNode = function()
	{
		if (!this._srcNode && this.hasAttribute("src"))
		{
		  this._srcNode = this.xml3ddocument.resolve(this.getAttribute("src"));
		}
		return this._srcNode;
	};





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onclick")
		{
			this.onclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "ondblclick")
		{
			this.ondblclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousedown")
		{
			this.onmousedown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseup")
		{
			this.onmouseup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseover")
		{
			this.onmouseover = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousemove")
		{
			this.onmousemove = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseout")
		{
			this.onmouseout = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeypress")
		{
			this.onkeypress = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeydown")
		{
			this.onkeydown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeyup")
		{
			this.onkeyup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "visible")
		{
			this.visible = org.xml3d.initBoolean(event.newValue, true);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "type")
		{
			this.type = org.xml3d.initEnum(event.newValue, 0, org.xml3d.MeshTypes);
			return org.xml3d.event.HANDLED;
		}



		if (event.attrName == "src")
		{
			this.src = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

		node.getWorldMatrix = org.xml3d.methods.XML3DGraphTypeGetWorldMatrix;

};
/**
 * Object org.xml3d.classInfo.transform()
 *
 * @augments org.xml3d.classInfo.XML3DTransformProviderType
 * @constructor
 * @see org.xml3d.classInfo.XML3DTransformProviderType
 */
org.xml3d.classInfo.transform = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("translation", function (value)
	{
		var oldValue = this._translation;

		if(org.xml3d.isXML3DVec3(value))
		{
			this._translation = value;
		}
		else
		{
			this._translation = org.xml3d.initXML3DVec3(value, 0, 0, 0);
		}

	    if(this._translation != null && this._translation.setOwnerNode)
		{
			this._translation.setOwnerNode("translation", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.translation))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "translation", oldValue, this._translation));
		}
	});

	node.__defineGetter__("translation", function (value)
	{
		return this._translation;
	});

	node.__defineSetter__("scale", function (value)
	{
		var oldValue = this._scale;

		if(org.xml3d.isXML3DVec3(value))
		{
			this._scale = value;
		}
		else
		{
			this._scale = org.xml3d.initXML3DVec3(value, 1, 1, 1);
		}

	    if(this._scale != null && this._scale.setOwnerNode)
		{
			this._scale.setOwnerNode("scale", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.scale))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "scale", oldValue, this._scale));
		}
	});

	node.__defineGetter__("scale", function (value)
	{
		return this._scale;
	});

	node.__defineSetter__("rotation", function (value)
	{
		var oldValue = this._rotation;

		if(org.xml3d.isXML3DRotation(value))
		{
			this._rotation = value;
		}
		else
		{
			this._rotation = org.xml3d.initXML3DRotation(value, 0, 0, 1, 0);
		}

	    if(this._rotation != null && this._rotation.setOwnerNode)
		{
			this._rotation.setOwnerNode("rotation", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.rotation))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "rotation", oldValue, this._rotation));
		}
	});

	node.__defineGetter__("rotation", function (value)
	{
		return this._rotation;
	});

	node.__defineSetter__("center", function (value)
	{
		var oldValue = this._center;

		if(org.xml3d.isXML3DVec3(value))
		{
			this._center = value;
		}
		else
		{
			this._center = org.xml3d.initXML3DVec3(value, 0, 0, 0);
		}

	    if(this._center != null && this._center.setOwnerNode)
		{
			this._center.setOwnerNode("center", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.center))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "center", oldValue, this._center));
		}
	});

	node.__defineGetter__("center", function (value)
	{
		return this._center;
	});

	node.__defineSetter__("scaleOrientation", function (value)
	{
		var oldValue = this._scaleOrientation;

		if(org.xml3d.isXML3DRotation(value))
		{
			this._scaleOrientation = value;
		}
		else
		{
			this._scaleOrientation = org.xml3d.initXML3DRotation(value, 0, 0, 1, 0);
		}

	    if(this._scaleOrientation != null && this._scaleOrientation.setOwnerNode)
		{
			this._scaleOrientation.setOwnerNode("scaleOrientation", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.scaleOrientation))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "scaleOrientation", oldValue, this._scaleOrientation));
		}
	});

	node.__defineGetter__("scaleOrientation", function (value)
	{
		return this._scaleOrientation;
	});







	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "translation")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.translation = org.xml3d.initXML3DVec3("", 0, 0, 0);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "scale")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.scale = org.xml3d.initXML3DVec3("", 1, 1, 1);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "rotation")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.rotation = org.xml3d.initXML3DRotation("", 0, 0, 1, 0);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "center")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.center = org.xml3d.initXML3DVec3("", 0, 0, 0);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "scaleOrientation")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.scaleOrientation = org.xml3d.initXML3DRotation("", 0, 0, 1, 0);
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._translation = org.xml3d.initXML3DVec3(node.getAttribute("translation"), 0, 0, 0);
	if(node._translation != null && node._translation.setOwnerNode)
	{
		node._translation.setOwnerNode("translation", node);
	}
	node._scale = org.xml3d.initXML3DVec3(node.getAttribute("scale"), 1, 1, 1);
	if(node._scale != null && node._scale.setOwnerNode)
	{
		node._scale.setOwnerNode("scale", node);
	}
	node._rotation = org.xml3d.initXML3DRotation(node.getAttribute("rotation"), 0, 0, 1, 0);
	if(node._rotation != null && node._rotation.setOwnerNode)
	{
		node._rotation.setOwnerNode("rotation", node);
	}
	node._center = org.xml3d.initXML3DVec3(node.getAttribute("center"), 0, 0, 0);
	if(node._center != null && node._center.setOwnerNode)
	{
		node._center.setOwnerNode("center", node);
	}
	node._scaleOrientation = org.xml3d.initXML3DRotation(node.getAttribute("scaleOrientation"), 0, 0, 1, 0);
	if(node._scaleOrientation != null && node._scaleOrientation.setOwnerNode)
	{
		node._scaleOrientation.setOwnerNode("scaleOrientation", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "translation")
		{
			this.translation = org.xml3d.initXML3DVec3(event.newValue, 0, 0, 0);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "scale")
		{
			this.scale = org.xml3d.initXML3DVec3(event.newValue, 1, 1, 1);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "rotation")
		{
			this.rotation = org.xml3d.initXML3DRotation(event.newValue, 0, 0, 1, 0);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "center")
		{
			this.center = org.xml3d.initXML3DVec3(event.newValue, 0, 0, 0);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "scaleOrientation")
		{
			this.scaleOrientation = org.xml3d.initXML3DRotation(event.newValue, 0, 0, 1, 0);
			return org.xml3d.event.HANDLED;
		}





		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.shader()
 *
 * @augments org.xml3d.classInfo.XML3DSurfaceShaderProviderType
 * @constructor
 * @see org.xml3d.classInfo.XML3DSurfaceShaderProviderType
 */
org.xml3d.classInfo.shader = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});





	node.__defineSetter__("script", function (value)
	{
		var oldValue = this._script;

		if(org.xml3d.isString(value))
		{
			this._script = value;
		}
		else
		{
			this._script = org.xml3d.initString(value, "");
		}

	    this._scriptNode = null;

	    if(this._script != null && this._script.setOwnerNode)
		{
			this._script.setOwnerNode("script", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._script))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "script", oldValue, this._script));
		}
	});

	node.__defineGetter__("script", function (value)
	{
		//return this._script;
		return this.getAttribute("script");
	});

	node.__defineSetter__("src", function (value)
	{
		var oldValue = this._src;

		if(org.xml3d.isString(value))
		{
			this._src = value;
		}
		else
		{
			this._src = org.xml3d.initString(value, "");
		}

	    this._srcNode = null;

	    if(this._src != null && this._src.setOwnerNode)
		{
			this._src.setOwnerNode("src", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._src))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "src", oldValue, this._src));
		}
	});

	node.__defineGetter__("src", function (value)
	{
		//return this._src;
		return this.getAttribute("src");
	});



	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		if(attrName == "script")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.script = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "src")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.src = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}

	//node.sources = [];
	//node.childContainers = [];



	node.getScriptNode = function()
	{
		if (!this._scriptNode && this.hasAttribute("script"))
		{
		  this._scriptNode = this.xml3ddocument.resolve(this.getAttribute("script"));
		}
		return this._scriptNode;
	};




	node.getSrcNode = function()
	{
		if (!this._srcNode && this.hasAttribute("src"))
		{
		  this._srcNode = this.xml3ddocument.resolve(this.getAttribute("src"));
		}
		return this._srcNode;
	};





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}



		if (event.attrName == "script")
		{
			this.script = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}
		if (event.attrName == "src")
		{
			this.src = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.light()
 *
 * @augments org.xml3d.classInfo.XML3DGraphType
 * @constructor
 * @see org.xml3d.classInfo.XML3DGraphType
 */
org.xml3d.classInfo.light = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("onclick", function (value)
	{
		var oldValue = this._onclick;

		if(org.xml3d.isString(value))
		{
			this._onclick = value;
		}
		else
		{
			this._onclick = org.xml3d.initString(value, "");
		}

	    if(this._onclick != null && this._onclick.setOwnerNode)
		{
			this._onclick.setOwnerNode("onclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onclick", oldValue, this._onclick));
		}
	});

	node.__defineGetter__("onclick", function (value)
	{
		return this._onclick;
	});

	node.__defineSetter__("ondblclick", function (value)
	{
		var oldValue = this._ondblclick;

		if(org.xml3d.isString(value))
		{
			this._ondblclick = value;
		}
		else
		{
			this._ondblclick = org.xml3d.initString(value, "");
		}

	    if(this._ondblclick != null && this._ondblclick.setOwnerNode)
		{
			this._ondblclick.setOwnerNode("ondblclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.ondblclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "ondblclick", oldValue, this._ondblclick));
		}
	});

	node.__defineGetter__("ondblclick", function (value)
	{
		return this._ondblclick;
	});

	node.__defineSetter__("onmousedown", function (value)
	{
		var oldValue = this._onmousedown;

		if(org.xml3d.isString(value))
		{
			this._onmousedown = value;
		}
		else
		{
			this._onmousedown = org.xml3d.initString(value, "");
		}

	    if(this._onmousedown != null && this._onmousedown.setOwnerNode)
		{
			this._onmousedown.setOwnerNode("onmousedown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousedown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousedown", oldValue, this._onmousedown));
		}
	});

	node.__defineGetter__("onmousedown", function (value)
	{
		return this._onmousedown;
	});

	node.__defineSetter__("onmouseup", function (value)
	{
		var oldValue = this._onmouseup;

		if(org.xml3d.isString(value))
		{
			this._onmouseup = value;
		}
		else
		{
			this._onmouseup = org.xml3d.initString(value, "");
		}

	    if(this._onmouseup != null && this._onmouseup.setOwnerNode)
		{
			this._onmouseup.setOwnerNode("onmouseup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseup", oldValue, this._onmouseup));
		}
	});

	node.__defineGetter__("onmouseup", function (value)
	{
		return this._onmouseup;
	});

	node.__defineSetter__("onmouseover", function (value)
	{
		var oldValue = this._onmouseover;

		if(org.xml3d.isString(value))
		{
			this._onmouseover = value;
		}
		else
		{
			this._onmouseover = org.xml3d.initString(value, "");
		}

	    if(this._onmouseover != null && this._onmouseover.setOwnerNode)
		{
			this._onmouseover.setOwnerNode("onmouseover", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseover))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseover", oldValue, this._onmouseover));
		}
	});

	node.__defineGetter__("onmouseover", function (value)
	{
		return this._onmouseover;
	});

	node.__defineSetter__("onmousemove", function (value)
	{
		var oldValue = this._onmousemove;

		if(org.xml3d.isString(value))
		{
			this._onmousemove = value;
		}
		else
		{
			this._onmousemove = org.xml3d.initString(value, "");
		}

	    if(this._onmousemove != null && this._onmousemove.setOwnerNode)
		{
			this._onmousemove.setOwnerNode("onmousemove", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousemove))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousemove", oldValue, this._onmousemove));
		}
	});

	node.__defineGetter__("onmousemove", function (value)
	{
		return this._onmousemove;
	});

	node.__defineSetter__("onmouseout", function (value)
	{
		var oldValue = this._onmouseout;

		if(org.xml3d.isString(value))
		{
			this._onmouseout = value;
		}
		else
		{
			this._onmouseout = org.xml3d.initString(value, "");
		}

	    if(this._onmouseout != null && this._onmouseout.setOwnerNode)
		{
			this._onmouseout.setOwnerNode("onmouseout", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseout))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseout", oldValue, this._onmouseout));
		}
	});

	node.__defineGetter__("onmouseout", function (value)
	{
		return this._onmouseout;
	});

	node.__defineSetter__("onkeypress", function (value)
	{
		var oldValue = this._onkeypress;

		if(org.xml3d.isString(value))
		{
			this._onkeypress = value;
		}
		else
		{
			this._onkeypress = org.xml3d.initString(value, "");
		}

	    if(this._onkeypress != null && this._onkeypress.setOwnerNode)
		{
			this._onkeypress.setOwnerNode("onkeypress", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeypress))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeypress", oldValue, this._onkeypress));
		}
	});

	node.__defineGetter__("onkeypress", function (value)
	{
		return this._onkeypress;
	});

	node.__defineSetter__("onkeydown", function (value)
	{
		var oldValue = this._onkeydown;

		if(org.xml3d.isString(value))
		{
			this._onkeydown = value;
		}
		else
		{
			this._onkeydown = org.xml3d.initString(value, "");
		}

	    if(this._onkeydown != null && this._onkeydown.setOwnerNode)
		{
			this._onkeydown.setOwnerNode("onkeydown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeydown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeydown", oldValue, this._onkeydown));
		}
	});

	node.__defineGetter__("onkeydown", function (value)
	{
		return this._onkeydown;
	});

	node.__defineSetter__("onkeyup", function (value)
	{
		var oldValue = this._onkeyup;

		if(org.xml3d.isString(value))
		{
			this._onkeyup = value;
		}
		else
		{
			this._onkeyup = org.xml3d.initString(value, "");
		}

	    if(this._onkeyup != null && this._onkeyup.setOwnerNode)
		{
			this._onkeyup.setOwnerNode("onkeyup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeyup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeyup", oldValue, this._onkeyup));
		}
	});

	node.__defineGetter__("onkeyup", function (value)
	{
		return this._onkeyup;
	});

	node.__defineSetter__("visible", function (value)
	{
		var oldValue = this._visible;

		if(org.xml3d.isBoolean(value))
		{
			this._visible = value;
		}
		else
		{
			this._visible = org.xml3d.initBoolean(value, true);
		}

	    if(this._visible != null && this._visible.setOwnerNode)
		{
			this._visible.setOwnerNode("visible", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.visible))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "visible", oldValue, this._visible));
		}
	});

	node.__defineGetter__("visible", function (value)
	{
		return this._visible;
	});

	node.__defineSetter__("global", function (value)
	{
		var oldValue = this._global;

		if(org.xml3d.isBoolean(value))
		{
			this._global = value;
		}
		else
		{
			this._global = org.xml3d.initBoolean(value, false);
		}

	    if(this._global != null && this._global.setOwnerNode)
		{
			this._global.setOwnerNode("global", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.global))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "global", oldValue, this._global));
		}
	});

	node.__defineGetter__("global", function (value)
	{
		return this._global;
	});

	node.__defineSetter__("intensity", function (value)
	{
		var oldValue = this._intensity;

		if(org.xml3d.isFloat(value))
		{
			this._intensity = value;
		}
		else
		{
			this._intensity = org.xml3d.initFloat(value, 1);
		}

	    if(this._intensity != null && this._intensity.setOwnerNode)
		{
			this._intensity.setOwnerNode("intensity", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.intensity))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "intensity", oldValue, this._intensity));
		}
	});

	node.__defineGetter__("intensity", function (value)
	{
		return this._intensity;
	});





	node.__defineSetter__("shader", function (value)
	{
		var oldValue = this._shader;

		if(org.xml3d.isString(value))
		{
			this._shader = value;
		}
		else
		{
			this._shader = org.xml3d.initString(value, "");
		}

	    this._shaderNode = null;

	    if(this._shader != null && this._shader.setOwnerNode)
		{
			this._shader.setOwnerNode("shader", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._shader))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "shader", oldValue, this._shader));
		}
	});

	node.__defineGetter__("shader", function (value)
	{
		//return this._shader;
		return this.getAttribute("shader");
	});



	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "ondblclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.ondblclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousedown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousedown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseover")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseover = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousemove")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousemove = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseout")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseout = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeypress")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeypress = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeydown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeydown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeyup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeyup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "visible")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.visible = org.xml3d.initBoolean("", true);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "global")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.global = org.xml3d.initBoolean("", false);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "intensity")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.intensity = org.xml3d.initFloat("", 1);
			return org.xml3d.event.HANDLED;
		}

		if(attrName == "shader")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.shader = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._onclick = org.xml3d.initString(node.getAttribute("onclick"), "");
	if(node._onclick != null && node._onclick.setOwnerNode)
	{
		node._onclick.setOwnerNode("onclick", node);
	}
	node._ondblclick = org.xml3d.initString(node.getAttribute("ondblclick"), "");
	if(node._ondblclick != null && node._ondblclick.setOwnerNode)
	{
		node._ondblclick.setOwnerNode("ondblclick", node);
	}
	node._onmousedown = org.xml3d.initString(node.getAttribute("onmousedown"), "");
	if(node._onmousedown != null && node._onmousedown.setOwnerNode)
	{
		node._onmousedown.setOwnerNode("onmousedown", node);
	}
	node._onmouseup = org.xml3d.initString(node.getAttribute("onmouseup"), "");
	if(node._onmouseup != null && node._onmouseup.setOwnerNode)
	{
		node._onmouseup.setOwnerNode("onmouseup", node);
	}
	node._onmouseover = org.xml3d.initString(node.getAttribute("onmouseover"), "");
	if(node._onmouseover != null && node._onmouseover.setOwnerNode)
	{
		node._onmouseover.setOwnerNode("onmouseover", node);
	}
	node._onmousemove = org.xml3d.initString(node.getAttribute("onmousemove"), "");
	if(node._onmousemove != null && node._onmousemove.setOwnerNode)
	{
		node._onmousemove.setOwnerNode("onmousemove", node);
	}
	node._onmouseout = org.xml3d.initString(node.getAttribute("onmouseout"), "");
	if(node._onmouseout != null && node._onmouseout.setOwnerNode)
	{
		node._onmouseout.setOwnerNode("onmouseout", node);
	}
	node._onkeypress = org.xml3d.initString(node.getAttribute("onkeypress"), "");
	if(node._onkeypress != null && node._onkeypress.setOwnerNode)
	{
		node._onkeypress.setOwnerNode("onkeypress", node);
	}
	node._onkeydown = org.xml3d.initString(node.getAttribute("onkeydown"), "");
	if(node._onkeydown != null && node._onkeydown.setOwnerNode)
	{
		node._onkeydown.setOwnerNode("onkeydown", node);
	}
	node._onkeyup = org.xml3d.initString(node.getAttribute("onkeyup"), "");
	if(node._onkeyup != null && node._onkeyup.setOwnerNode)
	{
		node._onkeyup.setOwnerNode("onkeyup", node);
	}
	node._visible = org.xml3d.initBoolean(node.getAttribute("visible"), true);
	if(node._visible != null && node._visible.setOwnerNode)
	{
		node._visible.setOwnerNode("visible", node);
	}
	node._global = org.xml3d.initBoolean(node.getAttribute("global"), false);
	if(node._global != null && node._global.setOwnerNode)
	{
		node._global.setOwnerNode("global", node);
	}
	node._intensity = org.xml3d.initFloat(node.getAttribute("intensity"), 1);
	if(node._intensity != null && node._intensity.setOwnerNode)
	{
		node._intensity.setOwnerNode("intensity", node);
	}




	node.getShaderNode = function()
	{
		if (!this._shaderNode && this.hasAttribute("shader"))
		{
		  this._shaderNode = this.xml3ddocument.resolve(this.getAttribute("shader"));
		}
		return this._shaderNode;
	};





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onclick")
		{
			this.onclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "ondblclick")
		{
			this.ondblclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousedown")
		{
			this.onmousedown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseup")
		{
			this.onmouseup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseover")
		{
			this.onmouseover = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousemove")
		{
			this.onmousemove = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseout")
		{
			this.onmouseout = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeypress")
		{
			this.onkeypress = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeydown")
		{
			this.onkeydown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeyup")
		{
			this.onkeyup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "visible")
		{
			this.visible = org.xml3d.initBoolean(event.newValue, true);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "global")
		{
			this.global = org.xml3d.initBoolean(event.newValue, false);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "intensity")
		{
			this.intensity = org.xml3d.initFloat(event.newValue, 1);
			return org.xml3d.event.HANDLED;
		}



		if (event.attrName == "shader")
		{
			this.shader = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

		node.getWorldMatrix = org.xml3d.methods.XML3DGraphTypeGetWorldMatrix;

};
/**
 * Object org.xml3d.classInfo.lightshader()
 *
 * @augments org.xml3d.classInfo.XML3DLightShaderProviderType
 * @constructor
 * @see org.xml3d.classInfo.XML3DLightShaderProviderType
 */
org.xml3d.classInfo.lightshader = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});





	node.__defineSetter__("script", function (value)
	{
		var oldValue = this._script;

		if(org.xml3d.isString(value))
		{
			this._script = value;
		}
		else
		{
			this._script = org.xml3d.initString(value, "");
		}

	    this._scriptNode = null;

	    if(this._script != null && this._script.setOwnerNode)
		{
			this._script.setOwnerNode("script", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._script))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "script", oldValue, this._script));
		}
	});

	node.__defineGetter__("script", function (value)
	{
		//return this._script;
		return this.getAttribute("script");
	});

	node.__defineSetter__("src", function (value)
	{
		var oldValue = this._src;

		if(org.xml3d.isString(value))
		{
			this._src = value;
		}
		else
		{
			this._src = org.xml3d.initString(value, "");
		}

	    this._srcNode = null;

	    if(this._src != null && this._src.setOwnerNode)
		{
			this._src.setOwnerNode("src", this);
		}


		if (this.notificationRequired() && ! isEqual(oldValue, this._src))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "src", oldValue, this._src));
		}
	});

	node.__defineGetter__("src", function (value)
	{
		//return this._src;
		return this.getAttribute("src");
	});



	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		if(attrName == "script")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.script = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "src")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.src = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}

		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}

	//node.sources = [];
	//node.childContainers = [];



	node.getScriptNode = function()
	{
		if (!this._scriptNode && this.hasAttribute("script"))
		{
		  this._scriptNode = this.xml3ddocument.resolve(this.getAttribute("script"));
		}
		return this._scriptNode;
	};




	node.getSrcNode = function()
	{
		if (!this._srcNode && this.hasAttribute("src"))
		{
		  this._srcNode = this.xml3ddocument.resolve(this.getAttribute("src"));
		}
		return this._srcNode;
	};





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}



		if (event.attrName == "script")
		{
			this.script = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}
		if (event.attrName == "src")
		{
			this.src = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.script()
 *
 * @augments org.xml3d.classInfo.XML3DReferenceableType
 * @constructor
 * @see org.xml3d.classInfo.XML3DReferenceableType
 */
org.xml3d.classInfo.script = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	// TODO: Setter for mixed value
	node.setValue = function(e)
	{
		var oldValue = this.value;
		this.value = org.xml3d.initString(e.newValue, null);

		if (this.parentNode.notificationRequired() && ! isEqual(oldValue,this.value))
		{
	    	this.parentNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "value", oldValue, this.value));
		}
	};
	node.__defineSetter__("src", function (value)
	{
		var oldValue = this._src;

		if(org.xml3d.isString(value))
		{
			this._src = value;
		}
		else
		{
			this._src = org.xml3d.initString(value, "");
		}

	    if(this._src != null && this._src.setOwnerNode)
		{
			this._src.setOwnerNode("src", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.src))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "src", oldValue, this._src));
		}
	});

	node.__defineGetter__("src", function (value)
	{
		return this._src;
	});

	node.__defineSetter__("type", function (value)
	{
		var oldValue = this._type;

		if(org.xml3d.isString(value))
		{
			this._type = value;
		}
		else
		{
			this._type = org.xml3d.initString(value, "");
		}

	    if(this._type != null && this._type.setOwnerNode)
		{
			this._type.setOwnerNode("type", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.type))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "type", oldValue, this._type));
		}
	});

	node.__defineGetter__("type", function (value)
	{
		return this._type;
	});







	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "src")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.src = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "type")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.type = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node.value = org.xml3d.initString(node.getTextContent(), null);

	if(node.value != null && node.value.setOwnerNode)
	{
		node.value.setOwnerNode("value", node);
	}
	node._src = org.xml3d.initString(node.getAttribute("src"), "");
	if(node._src != null && node._src.setOwnerNode)
	{
		node._src.setOwnerNode("src", node);
	}
	node._type = org.xml3d.initString(node.getAttribute("type"), "");
	if(node._type != null && node._type.setOwnerNode)
	{
		node._type.setOwnerNode("type", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}


		if (event.attrName == "src")
		{
			this.src = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "type")
		{
			this.type = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}





		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.float()
 *
 * @augments org.xml3d.classInfo.XML3DDataSourceType
 * @constructor
 * @see org.xml3d.classInfo.XML3DDataSourceType
 */
org.xml3d.classInfo.float = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("name", function (value)
	{
		var oldValue = this._name;

		if(org.xml3d.isString(value))
		{
			this._name = value;
		}
		else
		{
			this._name = org.xml3d.initString(value, "");
		}

	    if(this._name != null && this._name.setOwnerNode)
		{
			this._name.setOwnerNode("name", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.name))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "name", oldValue, this._name));
		}
	});

	node.__defineGetter__("name", function (value)
	{
		return this._name;
	});

	// TODO: Setter for mixed value
	node.setValue = function(e)
	{
		var oldValue = this.value;
		this.value = org.xml3d.initFloatArray(e.newValue, null);

		if (this.parentNode.notificationRequired() && ! isEqual(oldValue,this.value))
		{
	    	this.parentNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "value", oldValue, this.value));
		}
	};






	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "name")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.name = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._name = org.xml3d.initString(node.getAttribute("name"), "");
	if(node._name != null && node._name.setOwnerNode)
	{
		node._name.setOwnerNode("name", node);
	}
	node.value = org.xml3d.initFloatArray(node.getTextContent(), null);

	if(node.value != null && node.value.setOwnerNode)
	{
		node.value.setOwnerNode("value", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "name")
		{
			this.name = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}






		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.float2()
 *
 * @augments org.xml3d.classInfo.XML3DDataSourceType
 * @constructor
 * @see org.xml3d.classInfo.XML3DDataSourceType
 */
org.xml3d.classInfo.float2 = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("name", function (value)
	{
		var oldValue = this._name;

		if(org.xml3d.isString(value))
		{
			this._name = value;
		}
		else
		{
			this._name = org.xml3d.initString(value, "");
		}

	    if(this._name != null && this._name.setOwnerNode)
		{
			this._name.setOwnerNode("name", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.name))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "name", oldValue, this._name));
		}
	});

	node.__defineGetter__("name", function (value)
	{
		return this._name;
	});

	// TODO: Setter for mixed value
	node.setValue = function(e)
	{
		var oldValue = this.value;
		this.value = org.xml3d.initFloat2Array(e.newValue, null);

		if (this.parentNode.notificationRequired() && ! isEqual(oldValue,this.value))
		{
	    	this.parentNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "value", oldValue, this.value));
		}
	};






	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "name")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.name = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._name = org.xml3d.initString(node.getAttribute("name"), "");
	if(node._name != null && node._name.setOwnerNode)
	{
		node._name.setOwnerNode("name", node);
	}
	node.value = org.xml3d.initFloat2Array(node.getTextContent(), null);

	if(node.value != null && node.value.setOwnerNode)
	{
		node.value.setOwnerNode("value", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "name")
		{
			this.name = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}






		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.float3()
 *
 * @augments org.xml3d.classInfo.XML3DDataSourceType
 * @constructor
 * @see org.xml3d.classInfo.XML3DDataSourceType
 */
org.xml3d.classInfo.float3 = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("name", function (value)
	{
		var oldValue = this._name;

		if(org.xml3d.isString(value))
		{
			this._name = value;
		}
		else
		{
			this._name = org.xml3d.initString(value, "");
		}

	    if(this._name != null && this._name.setOwnerNode)
		{
			this._name.setOwnerNode("name", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.name))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "name", oldValue, this._name));
		}
	});

	node.__defineGetter__("name", function (value)
	{
		return this._name;
	});

	// TODO: Setter for mixed value
	node.setValue = function(e)
	{
		var oldValue = this.value;
		this.value = org.xml3d.initFloat3Array(e.newValue, null);

		if (this.parentNode.notificationRequired() && ! isEqual(oldValue,this.value))
		{
	    	this.parentNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "value", oldValue, this.value));
		}
	};






	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "name")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.name = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._name = org.xml3d.initString(node.getAttribute("name"), "");
	if(node._name != null && node._name.setOwnerNode)
	{
		node._name.setOwnerNode("name", node);
	}
	node.value = org.xml3d.initFloat3Array(node.getTextContent(), null);

	if(node.value != null && node.value.setOwnerNode)
	{
		node.value.setOwnerNode("value", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "name")
		{
			this.name = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}






		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.float4()
 *
 * @augments org.xml3d.classInfo.XML3DDataSourceType
 * @constructor
 * @see org.xml3d.classInfo.XML3DDataSourceType
 */
org.xml3d.classInfo.float4 = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("name", function (value)
	{
		var oldValue = this._name;

		if(org.xml3d.isString(value))
		{
			this._name = value;
		}
		else
		{
			this._name = org.xml3d.initString(value, "");
		}

	    if(this._name != null && this._name.setOwnerNode)
		{
			this._name.setOwnerNode("name", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.name))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "name", oldValue, this._name));
		}
	});

	node.__defineGetter__("name", function (value)
	{
		return this._name;
	});

	// TODO: Setter for mixed value
	node.setValue = function(e)
	{
		var oldValue = this.value;
		this.value = org.xml3d.initFloat4Array(e.newValue, null);

		if (this.parentNode.notificationRequired() && ! isEqual(oldValue,this.value))
		{
	    	this.parentNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "value", oldValue, this.value));
		}
	};






	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "name")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.name = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._name = org.xml3d.initString(node.getAttribute("name"), "");
	if(node._name != null && node._name.setOwnerNode)
	{
		node._name.setOwnerNode("name", node);
	}
	node.value = org.xml3d.initFloat4Array(node.getTextContent(), null);

	if(node.value != null && node.value.setOwnerNode)
	{
		node.value.setOwnerNode("value", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "name")
		{
			this.name = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}






		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.float4x4()
 *
 * @augments org.xml3d.classInfo.XML3DDataSourceType
 * @constructor
 * @see org.xml3d.classInfo.XML3DDataSourceType
 */
org.xml3d.classInfo.float4x4 = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("name", function (value)
	{
		var oldValue = this._name;

		if(org.xml3d.isString(value))
		{
			this._name = value;
		}
		else
		{
			this._name = org.xml3d.initString(value, "");
		}

	    if(this._name != null && this._name.setOwnerNode)
		{
			this._name.setOwnerNode("name", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.name))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "name", oldValue, this._name));
		}
	});

	node.__defineGetter__("name", function (value)
	{
		return this._name;
	});

	// TODO: Setter for mixed value
	node.setValue = function(e)
	{
		var oldValue = this.value;
		this.value = org.xml3d.initFloat4x4Array(e.newValue, []);

		if (this.parentNode.notificationRequired() && ! isEqual(oldValue,this.value))
		{
	    	this.parentNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "value", oldValue, this.value));
		}
	};






	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "name")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.name = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._name = org.xml3d.initString(node.getAttribute("name"), "");
	if(node._name != null && node._name.setOwnerNode)
	{
		node._name.setOwnerNode("name", node);
	}
	node.value = org.xml3d.initFloat4x4Array(node.getTextContent(), []);

	if(node.value != null && node.value.setOwnerNode)
	{
		node.value.setOwnerNode("value", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "name")
		{
			this.name = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}






		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.int()
 *
 * @augments org.xml3d.classInfo.XML3DDataSourceType
 * @constructor
 * @see org.xml3d.classInfo.XML3DDataSourceType
 */
org.xml3d.classInfo.int = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("name", function (value)
	{
		var oldValue = this._name;

		if(org.xml3d.isString(value))
		{
			this._name = value;
		}
		else
		{
			this._name = org.xml3d.initString(value, "");
		}

	    if(this._name != null && this._name.setOwnerNode)
		{
			this._name.setOwnerNode("name", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.name))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "name", oldValue, this._name));
		}
	});

	node.__defineGetter__("name", function (value)
	{
		return this._name;
	});

	// TODO: Setter for mixed value
	node.setValue = function(e)
	{
		var oldValue = this.value;
		this.value = org.xml3d.initIntArray(e.newValue, null);

		if (this.parentNode.notificationRequired() && ! isEqual(oldValue,this.value))
		{
	    	this.parentNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "value", oldValue, this.value));
		}
	};






	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "name")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.name = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._name = org.xml3d.initString(node.getAttribute("name"), "");
	if(node._name != null && node._name.setOwnerNode)
	{
		node._name.setOwnerNode("name", node);
	}
	node.value = org.xml3d.initIntArray(node.getTextContent(), null);

	if(node.value != null && node.value.setOwnerNode)
	{
		node.value.setOwnerNode("value", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "name")
		{
			this.name = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}






		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.bool()
 *
 * @augments org.xml3d.classInfo.XML3DDataSourceType
 * @constructor
 * @see org.xml3d.classInfo.XML3DDataSourceType
 */
org.xml3d.classInfo.bool = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("name", function (value)
	{
		var oldValue = this._name;

		if(org.xml3d.isString(value))
		{
			this._name = value;
		}
		else
		{
			this._name = org.xml3d.initString(value, "");
		}

	    if(this._name != null && this._name.setOwnerNode)
		{
			this._name.setOwnerNode("name", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.name))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "name", oldValue, this._name));
		}
	});

	node.__defineGetter__("name", function (value)
	{
		return this._name;
	});

	// TODO: Setter for mixed value
	node.setValue = function(e)
	{
		var oldValue = this.value;
		this.value = org.xml3d.initBoolArray(e.newValue, null);

		if (this.parentNode.notificationRequired() && ! isEqual(oldValue,this.value))
		{
	    	this.parentNode.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "value", oldValue, this.value));
		}
	};






	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "name")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.name = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._name = org.xml3d.initString(node.getAttribute("name"), "");
	if(node._name != null && node._name.setOwnerNode)
	{
		node._name.setOwnerNode("name", node);
	}
	node.value = org.xml3d.initBoolArray(node.getTextContent(), null);

	if(node.value != null && node.value.setOwnerNode)
	{
		node.value.setOwnerNode("value", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "name")
		{
			this.name = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}






		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.texture()
 *
 * @augments org.xml3d.classInfo.XML3DDataSourceType
 * @constructor
 * @see org.xml3d.classInfo.XML3DDataSourceType
 */
org.xml3d.classInfo.texture = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("name", function (value)
	{
		var oldValue = this._name;

		if(org.xml3d.isString(value))
		{
			this._name = value;
		}
		else
		{
			this._name = org.xml3d.initString(value, "");
		}

	    if(this._name != null && this._name.setOwnerNode)
		{
			this._name.setOwnerNode("name", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.name))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "name", oldValue, this._name));
		}
	});

	node.__defineGetter__("name", function (value)
	{
		return this._name;
	});

	node.__defineSetter__("type", function (value)
	{
		var oldValue = this._type;

		if(org.xml3d.isEnum(value, org.xml3d.TextureTypes))
		{
			this._type = value;
		}
		else
		{
			this._type = org.xml3d.initEnum(value, 0, org.xml3d.TextureTypes);
		}

	    if(this._type != null && this._type.setOwnerNode)
		{
			this._type.setOwnerNode("type", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.type))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "type", oldValue, this._type));
		}
	});

	node.__defineGetter__("type", function (value)
	{
		return this._type;
	});

	node.__defineSetter__("filterMin", function (value)
	{
		var oldValue = this._filterMin;

		if(org.xml3d.isEnum(value, org.xml3d.FilterTypes))
		{
			this._filterMin = value;
		}
		else
		{
			this._filterMin = org.xml3d.initEnum(value, 2, org.xml3d.FilterTypes);
		}

	    if(this._filterMin != null && this._filterMin.setOwnerNode)
		{
			this._filterMin.setOwnerNode("filterMin", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.filterMin))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "filterMin", oldValue, this._filterMin));
		}
	});

	node.__defineGetter__("filterMin", function (value)
	{
		return this._filterMin;
	});

	node.__defineSetter__("filterMag", function (value)
	{
		var oldValue = this._filterMag;

		if(org.xml3d.isEnum(value, org.xml3d.FilterTypes))
		{
			this._filterMag = value;
		}
		else
		{
			this._filterMag = org.xml3d.initEnum(value, 2, org.xml3d.FilterTypes);
		}

	    if(this._filterMag != null && this._filterMag.setOwnerNode)
		{
			this._filterMag.setOwnerNode("filterMag", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.filterMag))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "filterMag", oldValue, this._filterMag));
		}
	});

	node.__defineGetter__("filterMag", function (value)
	{
		return this._filterMag;
	});

	node.__defineSetter__("filterMip", function (value)
	{
		var oldValue = this._filterMip;

		if(org.xml3d.isEnum(value, org.xml3d.FilterTypes))
		{
			this._filterMip = value;
		}
		else
		{
			this._filterMip = org.xml3d.initEnum(value, 1, org.xml3d.FilterTypes);
		}

	    if(this._filterMip != null && this._filterMip.setOwnerNode)
		{
			this._filterMip.setOwnerNode("filterMip", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.filterMip))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "filterMip", oldValue, this._filterMip));
		}
	});

	node.__defineGetter__("filterMip", function (value)
	{
		return this._filterMip;
	});

	node.__defineSetter__("wrapS", function (value)
	{
		var oldValue = this._wrapS;

		if(org.xml3d.isEnum(value, org.xml3d.WrapTypes))
		{
			this._wrapS = value;
		}
		else
		{
			this._wrapS = org.xml3d.initEnum(value, 0, org.xml3d.WrapTypes);
		}

	    if(this._wrapS != null && this._wrapS.setOwnerNode)
		{
			this._wrapS.setOwnerNode("wrapS", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.wrapS))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "wrapS", oldValue, this._wrapS));
		}
	});

	node.__defineGetter__("wrapS", function (value)
	{
		return this._wrapS;
	});

	node.__defineSetter__("wrapT", function (value)
	{
		var oldValue = this._wrapT;

		if(org.xml3d.isEnum(value, org.xml3d.WrapTypes))
		{
			this._wrapT = value;
		}
		else
		{
			this._wrapT = org.xml3d.initEnum(value, 0, org.xml3d.WrapTypes);
		}

	    if(this._wrapT != null && this._wrapT.setOwnerNode)
		{
			this._wrapT.setOwnerNode("wrapT", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.wrapT))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "wrapT", oldValue, this._wrapT));
		}
	});

	node.__defineGetter__("wrapT", function (value)
	{
		return this._wrapT;
	});

	node.__defineSetter__("wrapU", function (value)
	{
		var oldValue = this._wrapU;

		if(org.xml3d.isEnum(value, org.xml3d.WrapTypes))
		{
			this._wrapU = value;
		}
		else
		{
			this._wrapU = org.xml3d.initEnum(value, 0, org.xml3d.WrapTypes);
		}

	    if(this._wrapU != null && this._wrapU.setOwnerNode)
		{
			this._wrapU.setOwnerNode("wrapU", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.wrapU))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "wrapU", oldValue, this._wrapU));
		}
	});

	node.__defineGetter__("wrapU", function (value)
	{
		return this._wrapU;
	});

	node.__defineSetter__("borderColor", function (value)
	{
		var oldValue = this._borderColor;

		if(org.xml3d.isString(value))
		{
			this._borderColor = value;
		}
		else
		{
			this._borderColor = org.xml3d.initString(value, "");
		}

	    if(this._borderColor != null && this._borderColor.setOwnerNode)
		{
			this._borderColor.setOwnerNode("borderColor", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.borderColor))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "borderColor", oldValue, this._borderColor));
		}
	});

	node.__defineGetter__("borderColor", function (value)
	{
		return this._borderColor;
	});







	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "name")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.name = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "type")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.type = org.xml3d.initEnum("", 0, org.xml3d.TextureTypes);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "filterMin")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.filterMin = org.xml3d.initEnum("", 2, org.xml3d.FilterTypes);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "filterMag")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.filterMag = org.xml3d.initEnum("", 2, org.xml3d.FilterTypes);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "filterMip")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.filterMip = org.xml3d.initEnum("", 1, org.xml3d.FilterTypes);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "wrapS")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.wrapS = org.xml3d.initEnum("", 0, org.xml3d.WrapTypes);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "wrapT")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.wrapT = org.xml3d.initEnum("", 0, org.xml3d.WrapTypes);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "wrapU")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.wrapU = org.xml3d.initEnum("", 0, org.xml3d.WrapTypes);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "borderColor")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.borderColor = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._name = org.xml3d.initString(node.getAttribute("name"), "");
	if(node._name != null && node._name.setOwnerNode)
	{
		node._name.setOwnerNode("name", node);
	}
	node._type = org.xml3d.initEnum(node.getAttribute("type"), 0, org.xml3d.TextureTypes);
	if(node._type != null && node._type.setOwnerNode)
	{
		node._type.setOwnerNode("type", node);
	}
	node._filterMin = org.xml3d.initEnum(node.getAttribute("filterMin"), 2, org.xml3d.FilterTypes);
	if(node._filterMin != null && node._filterMin.setOwnerNode)
	{
		node._filterMin.setOwnerNode("filterMin", node);
	}
	node._filterMag = org.xml3d.initEnum(node.getAttribute("filterMag"), 2, org.xml3d.FilterTypes);
	if(node._filterMag != null && node._filterMag.setOwnerNode)
	{
		node._filterMag.setOwnerNode("filterMag", node);
	}
	node._filterMip = org.xml3d.initEnum(node.getAttribute("filterMip"), 1, org.xml3d.FilterTypes);
	if(node._filterMip != null && node._filterMip.setOwnerNode)
	{
		node._filterMip.setOwnerNode("filterMip", node);
	}
	node._wrapS = org.xml3d.initEnum(node.getAttribute("wrapS"), 0, org.xml3d.WrapTypes);
	if(node._wrapS != null && node._wrapS.setOwnerNode)
	{
		node._wrapS.setOwnerNode("wrapS", node);
	}
	node._wrapT = org.xml3d.initEnum(node.getAttribute("wrapT"), 0, org.xml3d.WrapTypes);
	if(node._wrapT != null && node._wrapT.setOwnerNode)
	{
		node._wrapT.setOwnerNode("wrapT", node);
	}
	node._wrapU = org.xml3d.initEnum(node.getAttribute("wrapU"), 0, org.xml3d.WrapTypes);
	if(node._wrapU != null && node._wrapU.setOwnerNode)
	{
		node._wrapU.setOwnerNode("wrapU", node);
	}
	node._borderColor = org.xml3d.initString(node.getAttribute("borderColor"), "");
	if(node._borderColor != null && node._borderColor.setOwnerNode)
	{
		node._borderColor.setOwnerNode("borderColor", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "name")
		{
			this.name = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "type")
		{
			this.type = org.xml3d.initEnum(event.newValue, 0, org.xml3d.TextureTypes);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "filterMin")
		{
			this.filterMin = org.xml3d.initEnum(event.newValue, 2, org.xml3d.FilterTypes);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "filterMag")
		{
			this.filterMag = org.xml3d.initEnum(event.newValue, 2, org.xml3d.FilterTypes);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "filterMip")
		{
			this.filterMip = org.xml3d.initEnum(event.newValue, 1, org.xml3d.FilterTypes);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "wrapS")
		{
			this.wrapS = org.xml3d.initEnum(event.newValue, 0, org.xml3d.WrapTypes);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "wrapT")
		{
			this.wrapT = org.xml3d.initEnum(event.newValue, 0, org.xml3d.WrapTypes);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "wrapU")
		{
			this.wrapU = org.xml3d.initEnum(event.newValue, 0, org.xml3d.WrapTypes);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "borderColor")
		{
			this.borderColor = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}





		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.img()
 *
 * @augments org.xml3d.classInfo.XML3DImageDataProviderType
 * @constructor
 * @see org.xml3d.classInfo.XML3DImageDataProviderType
 */
org.xml3d.classInfo.img = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("src", function (value)
	{
		var oldValue = this._src;

		if(org.xml3d.isString(value))
		{
			this._src = value;
		}
		else
		{
			this._src = org.xml3d.initString(value, "");
		}

	    if(this._src != null && this._src.setOwnerNode)
		{
			this._src.setOwnerNode("src", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.src))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "src", oldValue, this._src));
		}
	});

	node.__defineGetter__("src", function (value)
	{
		return this._src;
	});







	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "src")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.src = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._src = org.xml3d.initString(node.getAttribute("src"), "");
	if(node._src != null && node._src.setOwnerNode)
	{
		node._src.setOwnerNode("src", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "src")
		{
			this.src = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}





		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.video()
 *
 * @augments org.xml3d.classInfo.XML3DImageDataProviderType
 * @constructor
 * @see org.xml3d.classInfo.XML3DImageDataProviderType
 */
org.xml3d.classInfo.video = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("src", function (value)
	{
		var oldValue = this._src;

		if(org.xml3d.isString(value))
		{
			this._src = value;
		}
		else
		{
			this._src = org.xml3d.initString(value, "");
		}

	    if(this._src != null && this._src.setOwnerNode)
		{
			this._src.setOwnerNode("src", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.src))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "src", oldValue, this._src));
		}
	});

	node.__defineGetter__("src", function (value)
	{
		return this._src;
	});







	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "src")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.src = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._src = org.xml3d.initString(node.getAttribute("src"), "");
	if(node._src != null && node._src.setOwnerNode)
	{
		node._src.setOwnerNode("src", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "src")
		{
			this.src = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}





		return org.xml3d.event.UNHANDLED;
	};


};
/**
 * Object org.xml3d.classInfo.view()
 *
 * @augments org.xml3d.classInfo.XML3DGraphType
 * @constructor
 * @see org.xml3d.classInfo.XML3DGraphType
 */
org.xml3d.classInfo.view = function(node, context)
{
	org.xml3d.classInfo.Xml3dNode(node, context);



	node.__defineSetter__("id", function (value)
	{
		var oldValue = this._id;

		if(org.xml3d.isString(value))
		{
			this._id = value;
		}
		else
		{
			this._id = org.xml3d.initString(value, null);
		}

	    if(this._id != null && this._id.setOwnerNode)
		{
			this._id.setOwnerNode("id", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.id))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "id", oldValue, this._id));
		}
	});

	node.__defineGetter__("id", function (value)
	{
		return this._id;
	});

	node.__defineSetter__("class", function (value)
	{
		var oldValue = this._class;

		if(org.xml3d.isString(value))
		{
			this._class = value;
		}
		else
		{
			this._class = org.xml3d.initString(value, null);
		}

	    if(this._class != null && this._class.setOwnerNode)
		{
			this._class.setOwnerNode("class", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.class))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "class", oldValue, this._class));
		}
	});

	node.__defineGetter__("class", function (value)
	{
		return this._class;
	});

	node.__defineSetter__("style", function (value)
	{
		var oldValue = this._style;

		if(org.xml3d.isString(value))
		{
			this._style = value;
		}
		else
		{
			this._style = org.xml3d.initString(value, "");
		}

	    if(this._style != null && this._style.setOwnerNode)
		{
			this._style.setOwnerNode("style", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.style))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "style", oldValue, this._style));
		}
	});

	node.__defineGetter__("style", function (value)
	{
		return this._style;
	});

	node.__defineSetter__("onclick", function (value)
	{
		var oldValue = this._onclick;

		if(org.xml3d.isString(value))
		{
			this._onclick = value;
		}
		else
		{
			this._onclick = org.xml3d.initString(value, "");
		}

	    if(this._onclick != null && this._onclick.setOwnerNode)
		{
			this._onclick.setOwnerNode("onclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onclick", oldValue, this._onclick));
		}
	});

	node.__defineGetter__("onclick", function (value)
	{
		return this._onclick;
	});

	node.__defineSetter__("ondblclick", function (value)
	{
		var oldValue = this._ondblclick;

		if(org.xml3d.isString(value))
		{
			this._ondblclick = value;
		}
		else
		{
			this._ondblclick = org.xml3d.initString(value, "");
		}

	    if(this._ondblclick != null && this._ondblclick.setOwnerNode)
		{
			this._ondblclick.setOwnerNode("ondblclick", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.ondblclick))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "ondblclick", oldValue, this._ondblclick));
		}
	});

	node.__defineGetter__("ondblclick", function (value)
	{
		return this._ondblclick;
	});

	node.__defineSetter__("onmousedown", function (value)
	{
		var oldValue = this._onmousedown;

		if(org.xml3d.isString(value))
		{
			this._onmousedown = value;
		}
		else
		{
			this._onmousedown = org.xml3d.initString(value, "");
		}

	    if(this._onmousedown != null && this._onmousedown.setOwnerNode)
		{
			this._onmousedown.setOwnerNode("onmousedown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousedown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousedown", oldValue, this._onmousedown));
		}
	});

	node.__defineGetter__("onmousedown", function (value)
	{
		return this._onmousedown;
	});

	node.__defineSetter__("onmouseup", function (value)
	{
		var oldValue = this._onmouseup;

		if(org.xml3d.isString(value))
		{
			this._onmouseup = value;
		}
		else
		{
			this._onmouseup = org.xml3d.initString(value, "");
		}

	    if(this._onmouseup != null && this._onmouseup.setOwnerNode)
		{
			this._onmouseup.setOwnerNode("onmouseup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseup", oldValue, this._onmouseup));
		}
	});

	node.__defineGetter__("onmouseup", function (value)
	{
		return this._onmouseup;
	});

	node.__defineSetter__("onmouseover", function (value)
	{
		var oldValue = this._onmouseover;

		if(org.xml3d.isString(value))
		{
			this._onmouseover = value;
		}
		else
		{
			this._onmouseover = org.xml3d.initString(value, "");
		}

	    if(this._onmouseover != null && this._onmouseover.setOwnerNode)
		{
			this._onmouseover.setOwnerNode("onmouseover", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseover))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseover", oldValue, this._onmouseover));
		}
	});

	node.__defineGetter__("onmouseover", function (value)
	{
		return this._onmouseover;
	});

	node.__defineSetter__("onmousemove", function (value)
	{
		var oldValue = this._onmousemove;

		if(org.xml3d.isString(value))
		{
			this._onmousemove = value;
		}
		else
		{
			this._onmousemove = org.xml3d.initString(value, "");
		}

	    if(this._onmousemove != null && this._onmousemove.setOwnerNode)
		{
			this._onmousemove.setOwnerNode("onmousemove", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmousemove))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmousemove", oldValue, this._onmousemove));
		}
	});

	node.__defineGetter__("onmousemove", function (value)
	{
		return this._onmousemove;
	});

	node.__defineSetter__("onmouseout", function (value)
	{
		var oldValue = this._onmouseout;

		if(org.xml3d.isString(value))
		{
			this._onmouseout = value;
		}
		else
		{
			this._onmouseout = org.xml3d.initString(value, "");
		}

	    if(this._onmouseout != null && this._onmouseout.setOwnerNode)
		{
			this._onmouseout.setOwnerNode("onmouseout", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onmouseout))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onmouseout", oldValue, this._onmouseout));
		}
	});

	node.__defineGetter__("onmouseout", function (value)
	{
		return this._onmouseout;
	});

	node.__defineSetter__("onkeypress", function (value)
	{
		var oldValue = this._onkeypress;

		if(org.xml3d.isString(value))
		{
			this._onkeypress = value;
		}
		else
		{
			this._onkeypress = org.xml3d.initString(value, "");
		}

	    if(this._onkeypress != null && this._onkeypress.setOwnerNode)
		{
			this._onkeypress.setOwnerNode("onkeypress", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeypress))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeypress", oldValue, this._onkeypress));
		}
	});

	node.__defineGetter__("onkeypress", function (value)
	{
		return this._onkeypress;
	});

	node.__defineSetter__("onkeydown", function (value)
	{
		var oldValue = this._onkeydown;

		if(org.xml3d.isString(value))
		{
			this._onkeydown = value;
		}
		else
		{
			this._onkeydown = org.xml3d.initString(value, "");
		}

	    if(this._onkeydown != null && this._onkeydown.setOwnerNode)
		{
			this._onkeydown.setOwnerNode("onkeydown", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeydown))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeydown", oldValue, this._onkeydown));
		}
	});

	node.__defineGetter__("onkeydown", function (value)
	{
		return this._onkeydown;
	});

	node.__defineSetter__("onkeyup", function (value)
	{
		var oldValue = this._onkeyup;

		if(org.xml3d.isString(value))
		{
			this._onkeyup = value;
		}
		else
		{
			this._onkeyup = org.xml3d.initString(value, "");
		}

	    if(this._onkeyup != null && this._onkeyup.setOwnerNode)
		{
			this._onkeyup.setOwnerNode("onkeyup", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.onkeyup))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "onkeyup", oldValue, this._onkeyup));
		}
	});

	node.__defineGetter__("onkeyup", function (value)
	{
		return this._onkeyup;
	});

	node.__defineSetter__("visible", function (value)
	{
		var oldValue = this._visible;

		if(org.xml3d.isBoolean(value))
		{
			this._visible = value;
		}
		else
		{
			this._visible = org.xml3d.initBoolean(value, true);
		}

	    if(this._visible != null && this._visible.setOwnerNode)
		{
			this._visible.setOwnerNode("visible", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.visible))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "visible", oldValue, this._visible));
		}
	});

	node.__defineGetter__("visible", function (value)
	{
		return this._visible;
	});

	node.__defineSetter__("position", function (value)
	{
		var oldValue = this._position;

		if(org.xml3d.isXML3DVec3(value))
		{
			this._position = value;
		}
		else
		{
			this._position = org.xml3d.initXML3DVec3(value, 0, 0, 0);
		}

	    if(this._position != null && this._position.setOwnerNode)
		{
			this._position.setOwnerNode("position", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.position))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "position", oldValue, this._position));
		}
	});

	node.__defineGetter__("position", function (value)
	{
		return this._position;
	});

	node.__defineSetter__("orientation", function (value)
	{
		var oldValue = this._orientation;

		if(org.xml3d.isXML3DRotation(value))
		{
			this._orientation = value;
		}
		else
		{
			this._orientation = org.xml3d.initXML3DRotation(value, 0, 0, 1, 0);
		}

	    if(this._orientation != null && this._orientation.setOwnerNode)
		{
			this._orientation.setOwnerNode("orientation", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.orientation))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "orientation", oldValue, this._orientation));
		}
	});

	node.__defineGetter__("orientation", function (value)
	{
		return this._orientation;
	});

	node.__defineSetter__("fieldOfView", function (value)
	{
		var oldValue = this._fieldOfView;

		if(org.xml3d.isFloat(value))
		{
			this._fieldOfView = value;
		}
		else
		{
			this._fieldOfView = org.xml3d.initFloat(value, 0.785398);
		}

	    if(this._fieldOfView != null && this._fieldOfView.setOwnerNode)
		{
			this._fieldOfView.setOwnerNode("fieldOfView", this);
		}

		if (this.notificationRequired() && ! isEqual(oldValue,this.fieldOfView))
		{
			this.notify(new org.xml3d.Notification(this, MutationEvent.MODIFICATION, "fieldOfView", oldValue, this._fieldOfView));
		}
	});

	node.__defineGetter__("fieldOfView", function (value)
	{
		return this._fieldOfView;
	});







	node.resetAttribute = function(attrName)
	{
		if(attrName == "id")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.id = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "class")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.class = org.xml3d.initString("", null);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "style")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.style = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "ondblclick")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.ondblclick = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousedown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousedown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseover")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseover = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmousemove")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmousemove = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onmouseout")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onmouseout = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeypress")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeypress = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeydown")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeydown = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "onkeyup")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.onkeyup = org.xml3d.initString("", "");
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "visible")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.visible = org.xml3d.initBoolean("", true);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "position")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.position = org.xml3d.initXML3DVec3("", 0, 0, 0);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "orientation")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.orientation = org.xml3d.initXML3DRotation("", 0, 0, 1, 0);
			return org.xml3d.event.HANDLED;
		}
		if(attrName == "fieldOfView")
		{
			// An event is triggered through the corresponding setter. Therefore,
			// no further notification is required.
			this.fieldOfView = org.xml3d.initFloat("", 0.785398);
			return org.xml3d.event.HANDLED;
		}


		return org.xml3d.event.UNHANDLED;
	};

	node._id = org.xml3d.initString(node.getAttribute("id"), null);
	if(node._id != null && node._id.setOwnerNode)
	{
		node._id.setOwnerNode("id", node);
	}
	node._class = org.xml3d.initString(node.getAttribute("class"), null);
	if(node._class != null && node._class.setOwnerNode)
	{
		node._class.setOwnerNode("class", node);
	}
	node._style = org.xml3d.initString(node.getAttribute("style"), "");
	if(node._style != null && node._style.setOwnerNode)
	{
		node._style.setOwnerNode("style", node);
	}
	node._onclick = org.xml3d.initString(node.getAttribute("onclick"), "");
	if(node._onclick != null && node._onclick.setOwnerNode)
	{
		node._onclick.setOwnerNode("onclick", node);
	}
	node._ondblclick = org.xml3d.initString(node.getAttribute("ondblclick"), "");
	if(node._ondblclick != null && node._ondblclick.setOwnerNode)
	{
		node._ondblclick.setOwnerNode("ondblclick", node);
	}
	node._onmousedown = org.xml3d.initString(node.getAttribute("onmousedown"), "");
	if(node._onmousedown != null && node._onmousedown.setOwnerNode)
	{
		node._onmousedown.setOwnerNode("onmousedown", node);
	}
	node._onmouseup = org.xml3d.initString(node.getAttribute("onmouseup"), "");
	if(node._onmouseup != null && node._onmouseup.setOwnerNode)
	{
		node._onmouseup.setOwnerNode("onmouseup", node);
	}
	node._onmouseover = org.xml3d.initString(node.getAttribute("onmouseover"), "");
	if(node._onmouseover != null && node._onmouseover.setOwnerNode)
	{
		node._onmouseover.setOwnerNode("onmouseover", node);
	}
	node._onmousemove = org.xml3d.initString(node.getAttribute("onmousemove"), "");
	if(node._onmousemove != null && node._onmousemove.setOwnerNode)
	{
		node._onmousemove.setOwnerNode("onmousemove", node);
	}
	node._onmouseout = org.xml3d.initString(node.getAttribute("onmouseout"), "");
	if(node._onmouseout != null && node._onmouseout.setOwnerNode)
	{
		node._onmouseout.setOwnerNode("onmouseout", node);
	}
	node._onkeypress = org.xml3d.initString(node.getAttribute("onkeypress"), "");
	if(node._onkeypress != null && node._onkeypress.setOwnerNode)
	{
		node._onkeypress.setOwnerNode("onkeypress", node);
	}
	node._onkeydown = org.xml3d.initString(node.getAttribute("onkeydown"), "");
	if(node._onkeydown != null && node._onkeydown.setOwnerNode)
	{
		node._onkeydown.setOwnerNode("onkeydown", node);
	}
	node._onkeyup = org.xml3d.initString(node.getAttribute("onkeyup"), "");
	if(node._onkeyup != null && node._onkeyup.setOwnerNode)
	{
		node._onkeyup.setOwnerNode("onkeyup", node);
	}
	node._visible = org.xml3d.initBoolean(node.getAttribute("visible"), true);
	if(node._visible != null && node._visible.setOwnerNode)
	{
		node._visible.setOwnerNode("visible", node);
	}
	node._position = org.xml3d.initXML3DVec3(node.getAttribute("position"), 0, 0, 0);
	if(node._position != null && node._position.setOwnerNode)
	{
		node._position.setOwnerNode("position", node);
	}
	node._orientation = org.xml3d.initXML3DRotation(node.getAttribute("orientation"), 0, 0, 1, 0);
	if(node._orientation != null && node._orientation.setOwnerNode)
	{
		node._orientation.setOwnerNode("orientation", node);
	}
	node._fieldOfView = org.xml3d.initFloat(node.getAttribute("fieldOfView"), 0.785398);
	if(node._fieldOfView != null && node._fieldOfView.setOwnerNode)
	{
		node._fieldOfView.setOwnerNode("fieldOfView", node);
	}





	// Node::setField
	node.setField = function(event)
	{
		if (event.attrName == "id")
		{
			this.id = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "class")
		{
			this.class = org.xml3d.initString(event.newValue, null);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "style")
		{
			this.style = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onclick")
		{
			this.onclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "ondblclick")
		{
			this.ondblclick = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousedown")
		{
			this.onmousedown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseup")
		{
			this.onmouseup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseover")
		{
			this.onmouseover = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmousemove")
		{
			this.onmousemove = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onmouseout")
		{
			this.onmouseout = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeypress")
		{
			this.onkeypress = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeydown")
		{
			this.onkeydown = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "onkeyup")
		{
			this.onkeyup = org.xml3d.initString(event.newValue, "");
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "visible")
		{
			this.visible = org.xml3d.initBoolean(event.newValue, true);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "position")
		{
			this.position = org.xml3d.initXML3DVec3(event.newValue, 0, 0, 0);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "orientation")
		{
			this.orientation = org.xml3d.initXML3DRotation(event.newValue, 0, 0, 1, 0);
			return org.xml3d.event.HANDLED;
		}

		if (event.attrName == "fieldOfView")
		{
			this.fieldOfView = org.xml3d.initFloat(event.newValue, 0.785398);
			return org.xml3d.event.HANDLED;
		}





		return org.xml3d.event.UNHANDLED;
	};

		node.getWorldMatrix = org.xml3d.methods.XML3DGraphTypeGetWorldMatrix;
		node.setDirection = org.xml3d.methods.viewSetDirection;
		node.setUpVector = org.xml3d.methods.viewSetUpVector;
		node.lookAt = org.xml3d.methods.viewLookAt;
		node.getDirection = org.xml3d.methods.viewGetDirection;
		node.getUpVector = org.xml3d.methods.viewGetUpVector;
		node.getViewMatrix = org.xml3d.methods.viewGetViewMatrix;

};
org.xml3d.methods.xml3dCreateXML3DVec3 = function() {
	return new XML3DVec3();
};

org.xml3d.methods.xml3dCreateXML3DMatrix = function () {
	return new XML3DMatrix();
};

org.xml3d.methods.xml3dCreateXML3DRotation = function() {
	return new XML3DRotation();
};

org.xml3d.methods.viewGetDirection = function() {
	return this.orientation.rotateVec3(new XML3DVec3(0,0,-1));
};

org.xml3d.methods.viewSetPosition = function(pos) {
	this.position = pos;
};

org.xml3d.methods.viewSetDirection = function(quat) {
	this.orientation = quat;
};

org.xml3d.methods.viewSetUpVector = function() {
	throw Error("view::setSetUpVector not implemeted yet.");
};

org.xml3d.methods.viewGetUpVector = function() {
	return this.orientation.rotateVec3(new XML3DVec3(0, 1, 0));
};

org.xml3d.methods.viewSetUpVector = function() {
	throw Error("view::setSetUpVector not implemeted yet.");
};

org.xml3d.methods.viewLookAt = function(vec) {
	// TODO: write lookat function
};

org.xml3d.methods.xml3dGetElementByPoint = function(x, y) {
	for (i = 0; i < this.adapters.length; i++) {
		if (this.adapters[i].getElementByPoint) {
			return this.adapters[i].getElementByPoint(x, y);
		}
	}
};
